<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
    <GenerateDocumentationFile>True</GenerateDocumentationFile>
    <DocumentationFile>ConstTypeArgs.Uints.xml</DocumentationFile>
    <PackageIcon>Uint.png</PackageIcon>
    <PackageReadmeFile>README.MD</PackageReadmeFile>
    <Company>Entry Point Software</Company>
    <Authors>Zachary Layne</Authors>
    <Title>Const Type Arguments - Uints</Title>
    <Copyright>Copyright (c) 2024 Zachary Layne</Copyright>
    <RepositoryUrl>https://github.com/zacharylayne/ConstTypeArgs</RepositoryUrl>
    <PackageTags>constants; const-type-args; generics; static-abstract-interface-members; uint</PackageTags>
    <PackageReleaseNotes>Initial release.</PackageReleaseNotes>
    <PackageLicenseFile>LICENSE.txt</PackageLicenseFile>
    <IncludeSymbols>True</IncludeSymbols>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
    <GenerateDocumentationFile>True</GenerateDocumentationFile>
    <DocumentationFile>ConstTypeArgs.Uints.xml</DocumentationFile>
    <Description>Builds on types of the ConstTypeArgs.Core library to provide const type arguments that allow you to use type parameters to pass uint values to generics at compile-time. This provides an analog to type specialization in C++.

Here's a simple demonstration:

 ```csharp
using ConstTypeArgs.Uints;

public class Foo&lt;TVal&gt;
  where TVal : K_Uint
{
  static Foo()
  {        
    if (TVal.Value &gt; 0)
      Console.WriteLine("Value is positive! ");
    if (TVal.Value &gt; (uint)int.MaxValue)
      Console.Write($"{TVal.Value} &gt; integer max value!");
  }
}

// Elsewhere, assuming that _2147483648 is equal to 2,147,483,648
var foo = new Foo&lt;_2147483648&gt;();
// Output: "Value is positive! 2147483648 &gt; integer max value!");
```

Here's how you could define a uint const type argument:

```csharp
public readonly struct Pos_2 : K_Uint&lt;Pos_2&gt;
{ public static uint Value =&gt; 2; }
```</Description>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <Optimize>False</Optimize>
    <IsTrimmable>True</IsTrimmable>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
    <IsTrimmable>True</IsTrimmable>
  </PropertyGroup>

  <ItemGroup>
    <None Include="..\..\Icons\Uint.png">
      <Pack>True</Pack>
      <PackagePath>\</PackagePath>
    </None>
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="ConstTypeArgs.Core" Version="1.0.0" />
  </ItemGroup>

  <ItemGroup>
    <None Update="LICENSE.txt">
      <Pack>True</Pack>
      <PackagePath>\</PackagePath>
    </None>
    <None Update="README.MD">
      <Pack>True</Pack>
      <PackagePath>\</PackagePath>
    </None>
  </ItemGroup>
</Project>

<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ConstTypeArgs.Longs</name>
    </assembly>
    <members>
        <member name="T:ConstTypeArgs.Longs.K_Long">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs.K_Long"/> interface provides a more explicit
            <c>IConstTypeArg&lt;long&gt;</c> derived type.
            </summary>
            <remarks>
            Implement this interface when defining <see langword="long"/> const type arguments
            rather than <see cref="T:ConstTypeArgs.Core.K_Unmanaged`1">K_Unmanaged&lt;long&gt;</see>,
            <see cref="T:ConstTypeArgs.Core.K_Integer`1">K_Integer&lt;long&gt;</see>,
            <see cref="T:ConstTypeArgs.Core.K_SignedNumber`1">K_UnsignedNumber&lt;long&gt;</see>, or
            <see cref="T:ConstTypeArgs.IConstTypeArg`1">IConstTypeArg&lt;long&gt;</see>.
            In uncommon scenarios where they need to be instantiated,
            use <see cref="T:ConstTypeArgs.Longs.K_Long`1"/> instead.
            </remarks>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.int64">
            System.Int64</seealso>
            <seealso cref="T:ConstTypeArgs.Longs.Long`1"/>
            <seealso cref="T:ConstTypeArgs.Longs.K_LongArray"/>
            <seealso cref="T:ConstTypeArgs.Longs.K_Long.__"/>
        </member>
        <member name="T:ConstTypeArgs.Longs.K_Long.__">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs.K_Long.__"/> interface is a <em>discard argument</em> meant to signify
            a lack of value and is used as a placeholder in type parameter lists.
            When combined with other discard arguments of other types, it can be used to create
            union-like behavior.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Longs.K_Long`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs.K_Long`1"/> interface provides a more explicit
            <c>IConstTypeArg&lt;long, K_Long&lt;TSelf&gt;&gt;</c> derived type.
            </summary>
            <typeparam name="TSelf">
            The implementing type.
            </typeparam>
            <remarks>
            Implement this interface for <see langword="long"/> const type arguments in uncommon
            scenarios where they need to be instantiated. Otherwise, use <see cref="T:ConstTypeArgs.Longs.K_Long"/> instead.
            </remarks>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.int64">
            System.Int64</seealso>
            <seealso cref="T:ConstTypeArgs.Longs.Long`1"/>
            <seealso cref="T:ConstTypeArgs.Longs.K_LongArray`1"/>
        </member>
        <member name="T:ConstTypeArgs.Longs.K_LongArray">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs.K_LongArray"/> interface provides a more explicit
            <c>IConstTypeArg&lt;long[]&gt;</c> type.
            </summary>
            <remarks>
            Implement this interface when defining <see langword="long[]"/> const type arguments
            rather than <see cref="T:ConstTypeArgs.Core.K_Array`1">K_Array&lt;long&gt;</see>
            or <see cref="T:ConstTypeArgs.IConstTypeArg`1">IConstTypeArg&lt;long[]&gt;</see>.
            In uncommon scenarios where they need to be instantiated,
            use <see cref="T:ConstTypeArgs.Longs.K_LongArray`1"/> instead.
            </remarks>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.int64">
            System.Int64</seealso>
            <seealso cref="T:ConstTypeArgs.Longs.LongArray`1"/>
            <seealso cref="T:ConstTypeArgs.Longs.K_Long"/>
            <seealso cref="T:ConstTypeArgs.Longs.K_LongArray.__"/>
        </member>
        <member name="T:ConstTypeArgs.Longs.K_LongArray.__">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs.K_LongArray.__"/> interface is a <em>discard argument</em> meant to signify
            a lack of value and is used as a placeholder in type parameter lists.
            When combined with other discard arguments of other types, it can be used to create
            union-like behavior.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Longs.K_LongArray`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs.K_LongArray`1"/> interface provides a more explicit
            <c>IConstTypeArg&lt;long[], K_LongArray&lt;TSelf&gt;&gt;</c> derived type.
            </summary>
            <typeparam name="TSelf">
            The implementing type.
            </typeparam>
            <remarks>
            Implement this interface for <see langword="long[]"/> const type arguments in uncommon
            scenarios where they need to be instantiated.
            Otherwise, use <see cref="T:ConstTypeArgs.Longs.K_LongArray"/> instead.
            </remarks>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.int64">
            System.Int64</seealso>
            <seealso cref="T:ConstTypeArgs.Longs.LongArray`1"/>
            <seealso cref="T:ConstTypeArgs.Longs.K_Long`1"/>
        </member>
        <member name="T:ConstTypeArgs.Longs.Long`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs.Long`1"/> class provides a const argument provider that
            wraps the <see langword="long"/> value from another const argument provider.
            </summary>
            <typeparam name="K">
            The const argument provider type containing the value to wrap.
            </typeparam>
            <remarks>
            This class can be used to create domain-specific const type arguments or
            to wrap const type arguments for reuse in other contexts.
            </remarks>
            <seealso cref="T:ConstTypeArgs.Longs.K_Long"/>
            <seealso cref="T:ConstTypeArgs.Longs.LongArray`1"/>
        </member>
        <member name="T:ConstTypeArgs.Longs.LongArray`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs.LongArray`1"/> class provides a const argument provider that
            wraps the <see langword="long"/> array from another const argument provider.
            </summary>
            <typeparam name="K">
            The const argument provider type containing the array to wrap.
            </typeparam>
            <remarks>
            This class can be used to create domain-specific const type arguments or
            to wrap const type arguments for reuse in other contexts.
            </remarks>
            <seealso cref="T:ConstTypeArgs.Longs.K_LongArray"/>
            <seealso cref="T:ConstTypeArgs.Longs.Long`1"/>
        </member>
        <member name="T:ConstTypeArgs.Longs.Default">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs.Default"/> readonly struct provides a const type argument equal to the
            <see langword="default"/> of <see langword="long"/> (<c>0</c>).
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Longs.MinValue">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs.MinValue"/> readonly struct provides a const type argument equal to
            <see href="https://docs.microsoft.com/dotnet/api/system.int64.minvalue">
            Int64.MinValue</see> (<c>-9223372036854775808</c>).
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Longs.MaxValue">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs.MaxValue"/> readonly struct provides a const type argument equal to
            <see href="https://docs.microsoft.com/dotnet/api/system.int64.maxvalue">
            Int64.MaxValue</see> (<c>9223372036854775807</c>).
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Longs.MaxDigits">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs.MaxDigits"/> readonly struct provides a const type argument equal to
            the maximum number of digits in a <see langword="long"/> (<c>19</c>).
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Longs.MaxHexDigits">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs.MaxHexDigits"/> readonly struct provides a const type argument equal to
            the maximum number of hex digits in a <see langword="long"/> (<c>4</c>).
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Longs._0">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs._0"/> readonly struct provides a const type argument equal to
            <c>0</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Longs.Neg_1">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs.Neg_1"/> readonly struct provides a const type argument equal to
            <c>-1</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Longs.Neg_2">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs.Neg_2"/> readonly struct provides a const type argument equal to
            <c>-2</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Longs.Neg_3">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs.Neg_3"/> readonly struct provides a const type argument equal to
            <c>-3</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Longs.Neg_4">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs.Neg_4"/> readonly struct provides a const type argument equal to
            <c>-4</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Longs.Neg_5">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs.Neg_5"/> readonly struct provides a const type argument equal to
            <c>-5</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Longs.Neg_6">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs.Neg_6"/> readonly struct provides a const type argument equal to
            <c>-6</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Longs.Neg_7">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs.Neg_7"/> readonly struct provides a const type argument equal to
            <c>-7</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Longs.Neg_8">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs.Neg_8"/> readonly struct provides a const type argument equal to
            <c>-8</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Longs.Neg_9">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs.Neg_9"/> readonly struct provides a const type argument equal to
            <c>-9</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Longs.Neg_10">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs.Neg_10"/> readonly struct provides a const type argument equal to
            <c>-10</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Longs.Neg_11">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs.Neg_11"/> readonly struct provides a const type argument equal to
            <c>-11</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Longs.Neg_12">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs.Neg_12"/> readonly struct provides a const type argument equal to
            <c>-12</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Longs.Neg_13">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs.Neg_13"/> readonly struct provides a const type argument equal to
            <c>-13</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Longs.Neg_14">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs.Neg_14"/> readonly struct provides a const type argument equal to
            <c>-14</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Longs.Neg_15">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs.Neg_15"/> readonly struct provides a const type argument equal to
            <c>-15</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Longs._1">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs._1"/> readonly struct provides a const type argument equal to
            <c>1</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Longs._2">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs._2"/> readonly struct provides a const type argument equal to
            <c>2</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Longs._3">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs._3"/> readonly struct provides a const type argument equal to
            <c>3</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Longs._4">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs._4"/> readonly struct provides a const type argument equal to
            <c>4</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Longs._5">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs._5"/> readonly struct provides a const type argument equal to
            <c>5</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Longs._6">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs._6"/> readonly struct provides a const type argument equal to
            <c>6</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Longs._7">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs._7"/> readonly struct provides a const type argument equal to
            <c>7</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Longs._8">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs._8"/> readonly struct provides a const type argument equal to
            <c>8</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Longs._9">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs._9"/> readonly struct provides a const type argument equal to
            <c>9</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Longs._10">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs._10"/> readonly struct provides a const type argument equal to
            <c>10</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Longs._11">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs._11"/> readonly struct provides a const type argument equal to
            <c>11</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Longs._12">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs._12"/> readonly struct provides a const type argument equal to
            <c>12</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Longs._13">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs._13"/> readonly struct provides a const type argument equal to
            <c>13</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Longs._14">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs._14"/> readonly struct provides a const type argument equal to
            <c>14</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Longs._15">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs._15"/> readonly struct provides a const type argument equal to
            <c>15</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Longs._16">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs._16"/> readonly struct provides a const type argument equal to
            <c>16</c> (<c>2^4</c>).
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Longs._25">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs._25"/> readonly struct provides a const type argument equal to
            <c>25</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Longs._31">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs._31"/> readonly struct provides a const type argument equal to
            <c>31</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Longs._32">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs._32"/> readonly struct provides a const type argument equal to
            <c>32</c> (<c>2^5</c>).
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Longs._50">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs._50"/> readonly struct provides a const type argument equal to
            <c>50</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Longs._63">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs._63"/> readonly struct provides a const type argument equal to
            <c>63</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Longs._64">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs._64"/> readonly struct provides a const type argument equal to
            <c>64</c> (<c>2^6</c>).
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Longs._100">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs._100"/> readonly struct provides a const type argument equal to
            <c>100</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Longs._127">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs._127"/> readonly struct provides a const type argument equal to
            <c>127</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Longs._128">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs._128"/> readonly struct provides a const type argument equal to
            <c>128</c> (<c>2^7</c>).
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Longs._200">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs._200"/> readonly struct provides a const type argument equal to
            <c>200</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Longs._255">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs._255"/> readonly struct provides a const type argument equal to
            <c>255</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Longs._256">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs._256"/> readonly struct provides a const type argument equal to
            <c>256</c> (<c>2^8</c>).
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Longs._511">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs._511"/> readonly struct provides a const type argument equal to
            <c>_511</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Longs._512">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs._512"/> readonly struct provides a const type argument equal to
            <c>512</c> (<c>2^9</c>).
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Longs._1023">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs._1023"/> readonly struct provides a const type argument equal to
            <c>1023</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Longs._1024">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs._1024"/> readonly struct provides a const type argument equal to
            <c>1024</c> (<c>2^10</c>).
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Longs._2047">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs._2047"/> readonly struct provides a const type argument equal to
            <c>2047</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Longs._2048">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs._2048"/> readonly struct provides a const type argument equal to
            <c>2048</c> (<c>2^11</c>).
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Longs._4095">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs._4095"/> readonly struct provides a const type argument equal to
            <c>4095</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Longs._4096">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs._4096"/> readonly struct provides a const type argument equal to
            <c>4096</c> (<c>2^12</c>).
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Longs._8191">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs._8191"/> readonly struct provides a const type argument equal to
            <c>8191</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Longs._8192">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs._8192"/> readonly struct provides a const type argument equal to
            <c>8192</c> (<c>2^13</c>).
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Longs._16384">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs._16384"/> readonly struct provides a const type argument equal to
            <c>16384</c> (<c>2^14</c>).
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Longs._32768">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs._32768"/> readonly struct provides a const type argument equal to
            <c>32768</c> (<c>2^15</c>).
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Longs._65536">
            <summary>
            The <see cref="T:ConstTypeArgs.Longs._65536"/> readonly struct provides a const type argument equal to
            <c>65536</c> (<c>2^16</c>).
            </summary>
        </member>
    </members>
</doc>

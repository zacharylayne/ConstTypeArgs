<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ConstTypeArgs.Bytes</name>
    </assembly>
    <members>
        <member name="T:ConstTypeArgs.Bytes.K_Byte">
            <summary>
            The <see cref="T:ConstTypeArgs.Bytes.K_Byte"/> interface provides a more explicit
            <c>IConstTypeArg&lt;byte&gt;</c> derived type.
            </summary>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.byte">
            Byte</seealso>
            <seealso cref="T:ConstTypeArgs.Bytes.Byte`1"/>
            <seealso cref="T:ConstTypeArgs.Bytes.K_ByteArray"/>
        </member>
        <member name="T:ConstTypeArgs.Bytes.K_Byte`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Bytes.K_Byte`1"/> interface provides a more explicit
            <c>IConstTypeArg&lt;byte, K_Byte&lt;TSelf&gt;&gt;</c> derived type.
            </summary>
            <typeparam name="TSelf">
            The implementing type.
            </typeparam>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.byte">
            Byte</seealso>
            <seealso cref="T:ConstTypeArgs.Bytes.Byte`1"/>
            <seealso cref="T:ConstTypeArgs.Bytes.K_ByteArray`1"/>
        </member>
        <member name="T:ConstTypeArgs.Bytes.K_ByteArray">
            <summary>
            The <see cref="T:ConstTypeArgs.Bytes.K_ByteArray"/> interface provides a more explicit
            <c>IConstTypeArg&lt;byte[]&gt;</c> type.
            </summary>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.byte">
            System.Byte</seealso>
            <seealso cref="T:ConstTypeArgs.Bytes.ByteArray`1"/>
            <seealso cref="T:ConstTypeArgs.Bytes.K_Byte"/>
        </member>
        <member name="T:ConstTypeArgs.Bytes.K_ByteArray`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Bytes.K_ByteArray`1"/> interface provides a more explicit
            <c>IConstTypeArg&lt;byte[], K_ByteArray&lt;TSelf&gt;&gt;</c> derived type.
            </summary>
            <typeparam name="TSelf">
            The implementing type.
            </typeparam>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.byte">
            System.Byte</seealso>
            <seealso cref="T:ConstTypeArgs.Bytes.ByteArray`1"/>
            <seealso cref="T:ConstTypeArgs.Bytes.K_Byte`1"/>
        </member>
        <member name="T:ConstTypeArgs.Bytes.Byte`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Bytes.Byte`1"/> class provides a const argument provider that
            wraps the <see langword="byte"/> value from another const argument provider.
            </summary>
            <typeparam name="K">
            The const argument provider type containing the value to wrap.
            </typeparam>
            <remarks>
            This class can be useful when creating domain-specific const argument providers,
            such as default values, when a const argument provider's value needs to be
            wrapped for use in a different context.
            </remarks>
            <seealso cref="T:ConstTypeArgs.Bytes.ByteArray`1"/>
            <seealso cref="T:ConstTypeArgs.Bytes.K_Byte"/>
            <seealso cref="T:ConstTypeArgs.Bytes.K_Byte`1"/>
        </member>
        <member name="T:ConstTypeArgs.Bytes.ByteArray`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Bytes.ByteArray`1"/> class provides a const argument provider that
            wraps the <see langword="byte"/> array from another const argument provider.
            </summary>
            <typeparam name="K">
            The const argument provider type containing the array to wrap.
            </typeparam>
            <remarks>
            This class can be useful when creating domain-specific const argument providers,
            such as default values, when a const argument provider's value needs to be
            wrapped for use in a different context.
            </remarks>
            <seealso cref="T:ConstTypeArgs.Bytes.K_Byte"/>
            <seealso cref="T:ConstTypeArgs.Bytes.Byte`1"/>
        </member>
        <member name="T:ConstTypeArgs.Bytes.Default">
            <summary>
            The <see cref="T:ConstTypeArgs.Bytes.Default"/> readonly struct provides a const type argument equal to
            <see langword="default"/> of <see langword="byte"/> (<c>0</c>).
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Bytes.MinValue">
            <summary>
            The <see cref="T:ConstTypeArgs.Bytes.MinValue"/> readonly struct provides a const type argument equal to
            <see href="https://docs.microsoft.com/dotnet/api/system.byte.minvalue">
            Byte.MinValue</see> (<c>0</c>).
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Bytes.MaxValue">
            <summary>
            The <see cref="T:ConstTypeArgs.Bytes.MaxValue"/> readonly struct provides a const type argument equal to
            <see href="https://docs.microsoft.com/dotnet/api/system.byte.maxvalue">
            Byte.MaxValue</see> (<c>255</c>).
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Bytes.MaxDigits">
            <summary>
            The <see cref="T:ConstTypeArgs.Bytes.MaxDigits"/> readonly struct provides a const type argument equal to
            the maximum number of digits in a <see langword="byte"/> (<c>3</c>).
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Bytes.MaxHexDigits">
            <summary>
            The <see cref="T:ConstTypeArgs.Bytes.MaxHexDigits"/> readonly struct provides a const type argument equal to
            the maximum number of hex digits in a <see langword="byte"/> (<c>2</c>).
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Bytes._0">
            <summary>
            The <see cref="T:ConstTypeArgs.Bytes._0"/> readonly struct provides a const type argument equal to
            <c>0</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Bytes._1">
            <summary>
            The <see cref="T:ConstTypeArgs.Bytes._1"/> readonly struct provides a const type argument equal to
            <c>1</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Bytes._2">
            <summary>
            The <see cref="T:ConstTypeArgs.Bytes._2"/> readonly struct provides a const type argument equal to
            <c>2</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Bytes._3">
            <summary>
            The <see cref="T:ConstTypeArgs.Bytes._3"/> readonly struct provides a const type argument equal to
            <c>3</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Bytes._4">
            <summary>
            The <see cref="T:ConstTypeArgs.Bytes._4"/> readonly struct provides a const type argument equal to
            <c>4</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Bytes._5">
            <summary>
            The <see cref="T:ConstTypeArgs.Bytes._5"/> readonly struct provides a const type argument equal to
            <c>5</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Bytes._6">
            <summary>
            The <see cref="T:ConstTypeArgs.Bytes._6"/> readonly struct provides a const type argument equal to
            <c>6</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Bytes._7">
            <summary>
            The <see cref="T:ConstTypeArgs.Bytes._7"/> readonly struct provides a const type argument equal to
            <c>7</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Bytes._8">
            <summary>
            The <see cref="T:ConstTypeArgs.Bytes._8"/> readonly struct provides a const type argument equal to
            <c>8</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Bytes._9">
            <summary>
            The <see cref="T:ConstTypeArgs.Bytes._9"/> readonly struct provides a const type argument equal to
            <c>9</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Bytes._10">
            <summary>
            The <see cref="T:ConstTypeArgs.Bytes._10"/> readonly struct provides a const type argument equal to
            <c>10</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Bytes._15">
            <summary>
            The <see cref="T:ConstTypeArgs.Bytes._15"/> readonly struct provides a const type argument equal to
            <c>15</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Bytes._16">
            <summary>
            The <see cref="T:ConstTypeArgs.Bytes._16"/> readonly struct provides a const type argument equal to
            <c>16</c> (<c>2^4</c>).
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Bytes._25">
            <summary>
            The <see cref="T:ConstTypeArgs.Bytes._25"/> readonly struct provides a const type argument equal to
            <c>25</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Bytes._31">
            <summary>
            The <see cref="T:ConstTypeArgs.Bytes._31"/> readonly struct provides a const type argument equal to
            <c>31</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Bytes._32">
            <summary>
            The <see cref="T:ConstTypeArgs.Bytes._32"/> readonly struct provides a const type argument equal to
            <c>32</c> (<c>2^5</c>).
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Bytes._50">
            <summary>
            The <see cref="T:ConstTypeArgs.Bytes._50"/> readonly struct provides a const type argument equal to
            <c>50</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Bytes._63">
            <summary>
            The <see cref="T:ConstTypeArgs.Bytes._63"/> readonly struct provides a const type argument equal to
            <c>63</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Bytes._64">
            <summary>
            The <see cref="T:ConstTypeArgs.Bytes._64"/> readonly struct provides a const type argument equal to
            <c>64</c> (<c>2^6</c>).
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Bytes._100">
            <summary>
            The <see cref="T:ConstTypeArgs.Bytes._100"/> readonly struct provides a const type argument equal to
            <c>100</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Bytes._127">
            <summary>
            The <see cref="T:ConstTypeArgs.Bytes._127"/> readonly struct provides a const type argument equal to
            <c>127</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Bytes._128">
            <summary>
            The <see cref="T:ConstTypeArgs.Bytes._128"/> readonly struct provides a const type argument equal to
            <c>128</c> (<c>2^7</c>).
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Bytes._200">
            <summary>
            The <see cref="T:ConstTypeArgs.Bytes._200"/> readonly struct provides a const type argument equal to
            <c>200</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Bytes._255">
            <summary>
            The <see cref="T:ConstTypeArgs.Bytes._255"/> readonly struct provides a const type argument equal to
            <c>255</c> (<c>2^8 - 1</c>).
            </summary>
        </member>
    </members>
</doc>

<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ConstTypeArgs.Delegates</name>
    </assembly>
    <members>
        <member name="T:ConstTypeArgs.Delegates.Actions.K_ActionArray">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Actions.K_ActionArray"/> interface provides a more explicit
            <c>IConstTypeArg&lt;System.Action[]&gt;</c> derived type.
            </summary>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.action">
            Action</seealso>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Actions.ActionArray`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Actions.ActionArray`1"/> class provides an argument provider that
            wraps the
            <see href="https://learn.microsoft.com/dotnet/api/system.action">
            System.Action</see> array from another argument provider.
            </summary>
            <typeparam name="K">
            The type of argument provider containing the value to wrap.
            </typeparam>
            <remarks>
            This class can be useful when creating domain-specific argument providers,
            such as default values, when an argument provider's value needs to be
            wrapped for use in a different context.
            </remarks>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.action">
            System.Action</seealso>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Actions.K_ActionArray`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Actions.K_ActionArray`1"/> interface provides a more explicit
            <c>IConstTypeArg&lt;System.Action&lt;T&gt;[]&gt;</c> derived type.
            </summary>
            <typeparam name="T">
            The type of input parameter.
            </typeparam>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.action-1">
            System.Action&lt;T&gt;</seealso>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Actions.ActionArray`2">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Actions.ActionArray`2"/> class provides an argument provider that
            wraps the
            <see href="https://learn.microsoft.com/dotnet/api/system.action-1">
            System.Action&lt;T&gt;</see> array from another argument provider.
            </summary>
            <typeparam name="T">
            The type of input parameter.
            </typeparam>
            <typeparam name="K">
            The type of argument provider containing the value to wrap.
            </typeparam>
            <remarks>
            This class can be useful when creating domain-specific argument providers,
            such as default values, when an argument provider's value needs to be
            wrapped for use in a different context.
            </remarks>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.action-1">
            System.Action&lt;T&gt;</seealso>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Actions.K_ActionArray`2">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Actions.K_ActionArray`2"/> interface provides a more explicit
            <c>IConstTypeArg&lt;System.Action&lt;T1, T2&gt;[]&gt;</c> derived type.
            </summary>
            <typeparam name="T1">
            The type of the first input parameter.
            </typeparam>
            <typeparam name="T2">
            The type of the second input parameter.
            </typeparam>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.action-2">
            System.Action&lt;T1, T2&gt;</seealso>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Actions.ActionArray`3">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Actions.ActionArray`3"/> class provides an argument provider that
            wraps the
            <see href="https://learn.microsoft.com/dotnet/api/system.action-2">
            System.Action&lt;T1, T2, T3&gt;</see> array from another argument provider.
            </summary>
            <typeparam name="T1">
            The type of the first input parameter.
            </typeparam>
            <typeparam name="T2">
            The type of the second input parameter.
            </typeparam>
            <typeparam name="K">
            The type of argument provider containing the value to wrap.
            </typeparam>
            <remarks>
            This class can be useful when creating domain-specific argument providers,
            such as default values, when an argument provider's value needs to be
            wrapped for use in a different context.
            </remarks>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.action-2">
            System.Action&lt;T1, T2&gt;</seealso>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Actions.K_ActionArray`3">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Actions.K_ActionArray`3"/> interface provides a more explicit
            <c>IConstTypeArg&lt;System.Action&lt;T1, T2, T3&gt;[]&gt;</c> derived type.
            </summary>
            <typeparam name="T1">
            The type of the first input parameter.
            </typeparam>
            <typeparam name="T2">
            The type of the second input parameter.
            </typeparam>
            <typeparam name="T3">
            The type of the third input parameter.
            </typeparam>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.action-3">
            System.Action&lt;T1, T2, T3&gt;</seealso>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Actions.ActionArray`4">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Actions.ActionArray`4"/> class provides an argument provider that
            wraps the
            <see href="https://learn.microsoft.com/dotnet/api/system.action-3">
            System.Action&lt;T1, T2, T3&gt;</see> array from another argument provider.
            </summary>
            <typeparam name="T1">
            The type of the first input parameter.
            </typeparam>
            <typeparam name="T2">
            The type of the second input parameter.
            </typeparam>
            <typeparam name="T3">
            The type of the third input parameter.
            </typeparam>
            <typeparam name="K">
            The type of argument provider containing the value to wrap.
            </typeparam>
            <remarks>
            This class can be useful when creating domain-specific argument providers,
            such as default values, when an argument provider's value needs to be
            wrapped for use in a different context.
            </remarks>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.action-3">
            System.Action&lt;T1, T2, T3&gt;</seealso>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Actions.K_ActionArray`4">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Actions.K_ActionArray`4"/> interface provides a more explicit
            <c>IConstTypeArg&lt;System.Action&lt;T1,T2,T3,T4&gt;[]&gt;</c> derived type.
            </summary>
            <typeparam name="T1">
            The type of the first input parameter.
            </typeparam>
            <typeparam name="T2">
            The type of the second input parameter.
            </typeparam>
            <typeparam name="T3">
            The type of the third input parameter.
            </typeparam>
            <typeparam name="T4">
            The type of the fourth input parameter.
            </typeparam>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.action-4">
            System.Action&lt;T1, T2, T3, T4&gt;</seealso>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Actions.ActionArray`5">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Actions.ActionArray`5"/> class provides an argument provider that
            wraps the
            <see href="https://learn.microsoft.com/dotnet/api/system.action-4">
            System.Action&lt;T1, T2, T3, T4&gt;</see> array from another argument provider.
            </summary>
            <typeparam name="T1">
            The type of the first input parameter.
            </typeparam>
            <typeparam name="T2">
            The type of the second input parameter.
            </typeparam>
            <typeparam name="T3">
            The type of the third input parameter.
            </typeparam>
            <typeparam name="T4">
            The type of the fourth input parameter.
            </typeparam>
            <typeparam name="K">
            The type of argument provider containing the value to wrap.
            </typeparam>
            <remarks>
            This class can be useful when creating domain-specific argument providers,
            such as default values, when an argument provider's value needs to be
            wrapped for use in a different context.
            </remarks>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.action-4">
            System.Action&lt;T1, T2, T3, T4&gt;</seealso>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Actions.K_Procedure">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Actions.K_Procedure"/> interface provides a more explicit
            <c>IConstTypeArg&lt;Action&gt;</c> derived type.
            </summary>
            <seealso cref="T:ConstTypeArgs.Delegates.Funcs.K_Function`1"/>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.action">
            System.Action</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Funcs.K_Function`1"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Actions.K_Procedure`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Actions.K_Procedure`1"/> interface provides a more explicit
            <c>IConstTypeArg&lt;Action&lt;T&gt;&gt;</c> derived type.
            </summary>
            <typeparam name="T1">
            The type of the input parameter.
            </typeparam>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.action-1">
            Action&lt;T&gt;</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Funcs.K_Function`2"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Actions.K_Procedure`2">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Actions.K_Procedure`2"/> interface provides a more explicit
            <c>IConstTypeArg&lt;Action&lt;T1,T2&gt;&gt;</c> derived type.
            </summary>
            <typeparam name="T1">
            The type of the first input parameter.
            </typeparam>
            <typeparam name="T2">
            The type of the second input parameter.
            </typeparam>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.action-2">
            Action&lt;T1,T2&gt;</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Funcs.K_Function`3"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Actions.K_Procedure`3">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Actions.K_Procedure`3"/> interface provides a more explicit
            <c>IConstTypeArg&lt;Action&lt;T1,T2,T3&gt;&gt;</c> derived type.
            </summary>
            <typeparam name="T1">
            The type of the first input parameter.
            </typeparam>
            <typeparam name="T2">
            The type of the second input parameter.
            </typeparam>
            <typeparam name="T3">
            The type of the third input parameter.
            </typeparam>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.action-3">
            Action&lt;T1,T2,T3&gt;</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Funcs.K_Function`4"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Actions.K_Procedure`4">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Actions.K_Procedure`4"/> interface provides a more explicit
            <c>IConstTypeArg&lt;Action&lt;T1,T2,T3,T4&gt;&gt;</c> derived type.
            </summary>
            <typeparam name="T1">
            The type of the first input parameter.
            </typeparam>
            <typeparam name="T2">
            The type of the second input parameter.
            </typeparam>
            <typeparam name="T3">
            The type of the third input parameter.
            </typeparam>
            <typeparam name="T4">
            The type of the fourth input parameter.
            </typeparam>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.action-4">
            Action&lt;T1,T2,T3,T4&gt;</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Funcs.K_Function`5"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Actions.K_Procedure`5">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Actions.K_Procedure`5"/> interface provides a more explicit
            <c>IConstTypeArg&lt;Action&lt;T1,T2,T3,T4,T5&gt;&gt;</c> derived type.
            </summary>
            <typeparam name="T1">
            The type of the first input parameter.
            </typeparam>
            <typeparam name="T2">
            The type of the second input parameter.
            </typeparam>
            <typeparam name="T3">
            The type of the third input parameter.
            </typeparam>
            <typeparam name="T4">
            The type of the fourth input parameter.
            </typeparam>
            <typeparam name="T5">
            The type of the fifth input parameter.
            </typeparam>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.action-5">
            Action&lt;T1,T2,T3,T4,T5&gt;</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Funcs.K_Function`6"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Actions.K_Procedure`6">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Actions.K_Procedure`6"/> interface provides a more explicit
            <c>IConstTypeArg&lt;Action&lt;T1,T2,T3,T4,T5,T6&gt;&gt;</c> derived type.
            </summary>
            <typeparam name="T1">
            The type of the first input parameter.
            </typeparam>
            <typeparam name="T2">
            The type of the second input parameter.
            </typeparam>
            <typeparam name="T3">
            The type of the third input parameter.
            </typeparam>
            <typeparam name="T4">
            The type of the fourth input parameter.
            </typeparam>
            <typeparam name="T5">
            The type of the fifth input parameter.
            </typeparam>
            <typeparam name="T6">
            The type of the sixth input parameter.
            </typeparam>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.action-6">
            Action&lt;T1,T2,T3,T4,T5,T6&gt;</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Funcs.K_Function`7"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Actions.K_Procedure`7">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Actions.K_Procedure`7"/> interface provides a more explicit
            <c>IConstTypeArg&lt;Action&lt;T1,T2,T3,T4,T5,T6,T7&gt;&gt;</c> derived type.
            </summary>
            <typeparam name="T1">
            The type of the first input parameter.
            </typeparam>
            <typeparam name="T2">
            The type of the second input parameter.
            </typeparam>
            <typeparam name="T3">
            The type of the third input parameter.
            </typeparam>
            <typeparam name="T4">
            The type of the fourth input parameter.
            </typeparam>
            <typeparam name="T5">
            The type of the fifth input parameter.
            </typeparam>
            <typeparam name="T6">
            The type of the sixth input parameter.
            </typeparam>
            <typeparam name="T7">
            The type of the seventh input parameter.
            </typeparam>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.action-7">
            Action&lt;T1,T2,T3,T4,T5,T6,T7&gt;</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Funcs.K_Function`8"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Actions.K_Procedure`8">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Actions.K_Procedure`8"/> interface provides a more explicit
            <c>IConstTypeArg&lt;Action&lt;T1,T2,T3,T4,T5,T6,T7,T8&gt;&gt;</c> derived type.
            </summary>
            <typeparam name="T1">
            The type of the first input parameter.
            </typeparam>
            <typeparam name="T2">
            The type of the second input parameter.
            </typeparam>
            <typeparam name="T3">
            The type of the third input parameter.
            </typeparam>
            <typeparam name="T4">
            The type of the fourth input parameter.
            </typeparam>
            <typeparam name="T5">
            The type of the fifth input parameter.
            </typeparam>
            <typeparam name="T6">
            The type of the sixth input parameter.
            </typeparam>
            <typeparam name="T7">
            The type of the seventh input parameter.
            </typeparam>
            <typeparam name="T8">
            The type of the eighth input parameter.
            </typeparam>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.action-8">
            Action&lt;T1,T2,T3,T4,T5,T6,T7,T8&gt;</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Funcs.K_Function`9"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Actions.K_Procedure`9">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Actions.K_Procedure`9"/> interface provides a more explicit
            <c>IConstTypeArg&lt;Action&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9&gt;&gt;</c> derived type.
            </summary>
            <typeparam name="T1">
            The type of the first input parameter.
            </typeparam>
            <typeparam name="T2">
            The type of the second input parameter.
            </typeparam>
            <typeparam name="T3">
            The type of the third input parameter.
            </typeparam>
            <typeparam name="T4">
            The type of the fourth input parameter.
            </typeparam>
            <typeparam name="T5">
            The type of the fifth input parameter.
            </typeparam>
            <typeparam name="T6">
            The type of the sixth input parameter.
            </typeparam>
            <typeparam name="T7">
            The type of the seventh input parameter.
            </typeparam>
            <typeparam name="T8">
            The type of the eighth input parameter.
            </typeparam>
            <typeparam name="T9">
            The type of the ninth input parameter.
            </typeparam>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.action-9">
            Action&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9&gt;</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Funcs.K_Function`10"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Actions.K_Procedure`10">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Actions.K_Procedure`10"/> interface provides a more explicit
            <c>IConstTypeArg&lt;Action&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10&gt;&gt;</c> derived type.
            </summary>
            <typeparam name="T1">
            The type of the first input parameter.
            </typeparam>
            <typeparam name="T2">
            The type of the second input parameter.
            </typeparam>
            <typeparam name="T3">
            The type of the third input parameter.
            </typeparam>
            <typeparam name="T4">
            The type of the fourth input parameter.
            </typeparam>
            <typeparam name="T5">
            The type of the fifth input parameter.
            </typeparam>
            <typeparam name="T6">
            The type of the sixth input parameter.
            </typeparam>
            <typeparam name="T7">
            The type of the seventh input parameter.
            </typeparam>
            <typeparam name="T8">
            The type of the eighth input parameter.
            </typeparam>
            <typeparam name="T9">
            The type of the ninth input parameter.
            </typeparam>
            <typeparam name="T10">
            The type of the tenth input parameter.
            </typeparam>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.action-10">
            Action&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10&gt;</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Funcs.K_Function`11"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Actions.K_Procedure`11">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Actions.K_Procedure`11"/> interface provides a more explicit
            <c>IConstTypeArg&lt;Action&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11&gt;&gt;</c> derived type.
            </summary>
            <typeparam name="T1">
            The type of the first input parameter.
            </typeparam>
            <typeparam name="T2">
            The type of the second input parameter.
            </typeparam>
            <typeparam name="T3">
            The type of the third input parameter.
            </typeparam>
            <typeparam name="T4">
            The type of the fourth input parameter.
            </typeparam>
            <typeparam name="T5">
            The type of the fifth input parameter.
            </typeparam>
            <typeparam name="T6">
            The type of the sixth input parameter.
            </typeparam>
            <typeparam name="T7">
            The type of the seventh input parameter.
            </typeparam>
            <typeparam name="T8">
            The type of the eighth input parameter.
            </typeparam>
            <typeparam name="T9">
            The type of the ninth input parameter.
            </typeparam>
            <typeparam name="T10">
            The type of the tenth input parameter.
            </typeparam>
            <typeparam name="T11">
            The type of the eleventh input parameter.
            </typeparam>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.action-11">
            Action&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11&gt;</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Funcs.K_Function`12"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Actions.K_Procedure`12">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Actions.K_Procedure`12"/> interface provides a more explicit
            <c>IConstTypeArg&lt;Action&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12&gt;&gt;</c> derived type.
            </summary>
            <typeparam name="T1">
            The type of the first input parameter.
            </typeparam>
            <typeparam name="T2">
            The type of the second input parameter.
            </typeparam>
            <typeparam name="T3">
            The type of the third input parameter.
            </typeparam>
            <typeparam name="T4">
            The type of the fourth input parameter.
            </typeparam>
            <typeparam name="T5">
            The type of the fifth input parameter.
            </typeparam>
            <typeparam name="T6">
            The type of the sixth input parameter.
            </typeparam>
            <typeparam name="T7">
            The type of the seventh input parameter.
            </typeparam>
            <typeparam name="T8">
            The type of the eighth input parameter.
            </typeparam>
            <typeparam name="T9">
            The type of the ninth input parameter.
            </typeparam>
            <typeparam name="T10">
            The type of the tenth input parameter.
            </typeparam>
            <typeparam name="T11">
            The type of the eleventh input parameter.
            </typeparam>
            <typeparam name="T12">
            The type of the twelfth input parameter.
            </typeparam>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.action-12">
            Action&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12&gt;</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Funcs.K_Function`13"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Actions.K_Procedure`13">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Actions.K_Procedure`13"/> interface provides a more explicit
            <c>IConstTypeArg&lt;Action&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13&gt;&gt;</c> derived type.
            </summary>
            <typeparam name="T1">
            The type of the first input parameter.
            </typeparam>
            <typeparam name="T2">
            The type of the second input parameter.
            </typeparam>
            <typeparam name="T3">
            The type of the third input parameter.
            </typeparam>
            <typeparam name="T4">
            The type of the fourth input parameter.
            </typeparam>
            <typeparam name="T5">
            The type of the fifth input parameter.
            </typeparam>
            <typeparam name="T6">
            The type of the sixth input parameter.
            </typeparam>
            <typeparam name="T7">
            The type of the seventh input parameter.
            </typeparam>
            <typeparam name="T8">
            The type of the eighth input parameter.
            </typeparam>
            <typeparam name="T9">
            The type of the ninth input parameter.
            </typeparam>
            <typeparam name="T10">
            The type of the tenth input parameter.
            </typeparam>
            <typeparam name="T11">
            The type of the eleventh input parameter.
            </typeparam>
            <typeparam name="T12">
            The type of the twelfth input parameter.
            </typeparam>
            <typeparam name="T13">
            The type of the thirteenth input parameter.
            </typeparam>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.action-13">
            Action&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13&gt;</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Funcs.K_Function`14"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Actions.K_Procedure`14">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Actions.K_Procedure`14"/> interface provides a more explicit
            <c>IConstTypeArg&lt;Action&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14&gt;&gt;</c> derived type.
            </summary>
            <typeparam name="T1">
            The type of the first input parameter.
            </typeparam>
            <typeparam name="T2">
            The type of the second input parameter.
            </typeparam>
            <typeparam name="T3">
            The type of the third input parameter.
            </typeparam>
            <typeparam name="T4">
            The type of the fourth input parameter.
            </typeparam>
            <typeparam name="T5">
            The type of the fifth input parameter.
            </typeparam>
            <typeparam name="T6">
            The type of the sixth input parameter.
            </typeparam>
            <typeparam name="T7">
            The type of the seventh input parameter.
            </typeparam>
            <typeparam name="T8">
            The type of the eighth input parameter.
            </typeparam>
            <typeparam name="T9">
            The type of the ninth input parameter.
            </typeparam>
            <typeparam name="T10">
            The type of the tenth input parameter.
            </typeparam>
            <typeparam name="T11">
            The type of the eleventh input parameter.
            </typeparam>
            <typeparam name="T12">
            The type of the twelfth input parameter.
            </typeparam>
            <typeparam name="T13">
            The type of the thirteenth input parameter.
            </typeparam>
            <typeparam name="T14">
            The type of the fourteenth input parameter.
            </typeparam>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.action-14">
            Action&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14&gt;</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Funcs.K_Function`15"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Actions.K_Procedure`15">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Actions.K_Procedure`15"/> interface provides a more explicit
            <c>IConstTypeArg&lt;Action&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15&gt;&gt;</c> derived type.
            </summary>
            <typeparam name="T1">
            The type of the first input parameter.
            </typeparam>
            <typeparam name="T2">
            The type of the second input parameter.
            </typeparam>
            <typeparam name="T3">
            The type of the third input parameter.
            </typeparam>
            <typeparam name="T4">
            The type of the fourth input parameter.
            </typeparam>
            <typeparam name="T5">
            The type of the fifth input parameter.
            </typeparam>
            <typeparam name="T6">
            The type of the sixth input parameter.
            </typeparam>
            <typeparam name="T7">
            The type of the seventh input parameter.
            </typeparam>
            <typeparam name="T8">
            The type of the eighth input parameter.
            </typeparam>
            <typeparam name="T9">
            The type of the ninth input parameter.
            </typeparam>
            <typeparam name="T10">
            The type of the tenth input parameter.
            </typeparam>
            <typeparam name="T11">
            The type of the eleventh input parameter.
            </typeparam>
            <typeparam name="T12">
            The type of the twelfth input parameter.
            </typeparam>
            <typeparam name="T13">
            The type of the thirteenth input parameter.
            </typeparam>
            <typeparam name="T14">
            The type of the fourteenth input parameter.
            </typeparam>
            <typeparam name="T15">
            The type of the fifteenth input parameter.
            </typeparam>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.action-15">
            Action&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15&gt;</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Funcs.K_Function`16"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Predicates.K_Predicate`1"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Actions.K_Procedure`16">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Actions.K_Procedure`16"/> interface provides a more explicit
            <c>IConstTypeArg&lt;Action&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16&gt;&gt;</c> derived type.
            </summary>
            <typeparam name="T1">
            The type of the first input parameter.
            </typeparam>
            <typeparam name="T2">
            The type of the second input parameter.
            </typeparam>
            <typeparam name="T3">
            The type of the third input parameter.
            </typeparam>
            <typeparam name="T4">
            The type of the fourth input parameter.
            </typeparam>
            <typeparam name="T5">
            The type of the fifth input parameter.
            </typeparam>
            <typeparam name="T6">
            The type of the sixth input parameter.
            </typeparam>
            <typeparam name="T7">
            The type of the seventh input parameter.
            </typeparam>
            <typeparam name="T8">
            The type of the eighth input parameter.
            </typeparam>
            <typeparam name="T9">
            The type of the ninth input parameter.
            </typeparam>
            <typeparam name="T10">
            The type of the tenth input parameter.
            </typeparam>
            <typeparam name="T11">
            The type of the eleventh input parameter.
            </typeparam>
            <typeparam name="T12">
            The type of the twelfth input parameter.
            </typeparam>
            <typeparam name="T13">
            The type of the thirteenth input parameter.
            </typeparam>
            <typeparam name="T14">
            The type of the fourteenth input parameter.
            </typeparam>
            <typeparam name="T15">
            The type of the fifteenth input parameter.
            </typeparam>
            <typeparam name="T16">
            The type of the sixteenth input parameter.
            </typeparam>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.action-16">
            Action&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16&gt;</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Funcs.K_Function`17"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Predicates.K_Predicate`1"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Actions.Procedure`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Actions.Procedure`1"/> class provides an argument provider that
            wraps the
            <see href="https://learn.microsoft.com/dotnet/api/system.action">
            System.Action</see> value from another argument provider.
            </summary>
            <typeparam name="K">
            The type of argument provider containing the value to wrap.
            </typeparam>
            <remarks>
            This class can be useful when creating domain-specific argument providers,
            such as default values, when an argument provider's value needs to be
            wrapped for use in a different context.
            </remarks>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Actions.Procedure`2">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Actions.Procedure`2"/> class provides an argument provider that
            wraps the
            <see href="https://learn.microsoft.com/dotnet/api/system.action-1">
            System.Action&lt;T&gt;</see> value from another argument provider.
            </summary>
            <typeparam name="T">
            The type of the input parameter.
            </typeparam>
            <typeparam name="K">
            The type of argument provider containing the value to wrap.
            </typeparam>
            <remarks>
            This class can be useful when creating domain-specific argument providers,
            such as default values, when an argument provider's value needs to be
            wrapped for use in a different context.
            </remarks>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Actions.Procedure`3">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Actions.Procedure`3"/> class provides an argument provider that
            wraps the
            <see href="https://learn.microsoft.com/dotnet/api/system.action-2">
            System.Action&lt;T1, T2&gt;</see> value from another argument provider.
            </summary>
            <typeparam name="T1">
            The type of the first input parameter.
            </typeparam>
            <typeparam name="T2">
            The type of the second input parameter.
            </typeparam>
            <typeparam name="K">
            The type of argument provider containing the value to wrap.
            </typeparam>
            <remarks>
            This class can be useful when creating domain-specific argument providers,
            such as default values, when an argument provider's value needs to be
            wrapped for use in a different context.
            </remarks>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Actions.Procedure`4">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Actions.Procedure`4"/> class provides an argument provider that
            wraps the
            <see href="https://learn.microsoft.com/dotnet/api/system.action-3">
            System.Action&lt;T1, T2, T3&gt;</see> value from another argument provider.
            </summary>
            <typeparam name="T1">
            The type of the first input parameter.
            </typeparam>
            <typeparam name="T2">
            The type of the second input parameter.
            </typeparam>
            <typeparam name="T3">
            The type of the third input parameter.
            </typeparam>
            <typeparam name="K">
            The type of argument provider containing the value to wrap.
            </typeparam>
            <remarks>
            This class can be useful when creating domain-specific argument providers,
            such as default values, when an argument provider's value needs to be
            wrapped for use in a different context.
            </remarks>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Actions.Procedure`5">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Actions.Procedure`5"/> class provides an argument provider that
            wraps the
            <see href="https://learn.microsoft.com/dotnet/api/system.action-4">
            System.Action&lt;T1, T2, T3, T4&gt;</see> value from another argument provider.
            </summary>
            <typeparam name="T1">
            The type of the first input parameter.
            </typeparam>
            <typeparam name="T2">
            The type of the second input parameter.
            </typeparam>
            <typeparam name="T3">
            The type of the third input parameter.
            </typeparam>
            <typeparam name="T4">
            The type of the fourth input parameter.
            </typeparam>
            <typeparam name="K">
            The type of argument provider containing the value to wrap.
            </typeparam>
            <remarks>
            This class can be useful when creating domain-specific argument providers,
            such as default values, when an argument provider's value needs to be
            wrapped for use in a different context.
            </remarks>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Actions.ReadOnlySpanProcedure`2">
            <summary>
            Encapsulates a method that receives a read-only span of objects
            of type <typeparamref name="T"/> and a state object
            of type <typeparamref name="TArg"/>.
            </summary>
            <typeparam name="T">
            The type of the objects in the read-only span.
            </typeparam>
            <typeparam name="TArg">
            The type of the object that represents the state.
            </typeparam>
            <param name="span">
            A read-only span of objects of type <typeparamref name="T"/>.
            </param>
            <param name="arg">
            A state object of type <typeparamref name="TArg"/>.
            </param>
            <seealso cref="T:ConstTypeArgs.Delegates.Actions.K_ReadOnlySpanProcedure`2"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Actions.ReadOnlySpanProcedure`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Actions.SpanProcedure`2"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Actions.K_ReadOnlySpanProcedure`2">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Actions.K_ReadOnlySpanProcedure`2"/> interface provides a more explicit
            IConstTypeArgs&lt;ReadOnlySpanAction&lt;T, TArg&gt;&gt; derived type.
            </summary>
            <typeparam name="T">
            The type of the objects in the read-only span.
            </typeparam>
            <typeparam name="TArg">
            The type of the object that represents the state.
            </typeparam>
            <seealso cref="T:ConstTypeArgs.Delegates.Actions.ReadOnlySpanProcedure`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Actions.K_SpanProcedure`2"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Actions.ReadOnlySpanProcedure`3">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Actions.ReadOnlySpanProcedure`3"/> class provides an argument provider that
            wraps the <see cref="T:ConstTypeArgs.Delegates.Actions.ReadOnlySpanProcedure`2"/> from another argument provider.
            </summary>
            <typeparam name="T">
            The type of the objects in the read-only span.
            </typeparam>
            <typeparam name="TArg">
            The type of the object that represents the state.
            </typeparam>
            <typeparam name="K">
            The type of argument provider containing the value to wrap.
            </typeparam>
            <remarks>
            This class can be useful when creating domain-specific argument providers,
            such as default values, when an argument provider's value needs to be
            wrapped for use in a different context.
            </remarks>
            <seealso cref="T:ConstTypeArgs.Delegates.Actions.SpanProcedure`3"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Actions.RefProcedure`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Actions.RefProcedure`1"/> delegate is an action that
            takes a reference to a value of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">
            The type of the value to be passed by reference.
            </typeparam>
            <param name="reference">
            The reference to the value of type <typeparamref name="T"/>.
            </param>
            <seealso cref="T:ConstTypeArgs.Delegates.Actions.RefProcedure`2"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Funcs.RefFunction`2"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Funcs.RefFunction`3"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Actions.RefProcedure`2">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Actions.RefProcedure`1"/> delegate is an action that
            takes a reference to a value of type <typeparamref name="T"/>
            and additional arguments of type <typeparamref name="TArgs"/>.
            </summary>
            <typeparam name="T">
            The type of the value to be passed by reference.
            </typeparam>
            <typeparam name="TArgs">
            The type encapsulating the remaining arguments to be passed in.
            </typeparam>
            <param name="reference">
            The reference to the value of type <typeparamref name="T"/>.
            </param>
            <param name="arguments">
            The remaining arguments to be passed in.
            </param>
            <seealso cref="T:ConstTypeArgs.Delegates.Actions.RefProcedure`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Funcs.RefFunction`2"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Funcs.RefFunction`3"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Actions.K_RefProcedure`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Actions.K_RefProcedure`1"/> interface provides a more explicit
            IConstTypeArgs&lt;RefProcedure&lt;T&gt;&gt; derived type.
            </summary>
            <typeparam name="T">
            The type of the value to be passed by reference.
            </typeparam>
            <seealso cref="T:ConstTypeArgs.Delegates.Actions.K_RefProcedure`2"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Funcs.K_RefFunction`2"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Funcs.K_RefFunction`3"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Actions.K_RefProcedure`2">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Actions.K_RefProcedure`2"/> interface provides a more explicit
            IConstTypeArgs&lt;RefProcedure&lt;T, TArgs&gt;&gt; derived type.
            </summary>
            <typeparam name="T">
            The type of the value to be passed by reference.
            </typeparam>
            <typeparam name="TArgs">
            The type encapsulating the remaining arguments to be passed in.
            </typeparam>
            <seealso cref="T:ConstTypeArgs.Delegates.Actions.K_RefProcedure`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Funcs.K_RefFunction`2"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Funcs.K_RefFunction`3"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Actions.SpanProcedure`2">
            <summary>
            Encapsulates a method that receives a span of objects
            of type <typeparamref name="T"/> and a state object
            of type <typeparamref name="TArg"/>.
            </summary>
            <typeparam name="T">
            The type of the objects in the span.
            </typeparam>
            <typeparam name="TArg">
            The type of the object that represents the state.
            </typeparam>
            <param name="span">
            A span of objects of type <typeparamref name="T"/>.
            </param>
            <param name="arg">
            A state object of type <typeparamref name="TArg"/>.
            </param>
            <seealso cref="T:ConstTypeArgs.Delegates.Actions.K_SpanProcedure`2"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Actions.SpanProcedure`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Actions.ReadOnlySpanProcedure`2"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Actions.K_SpanProcedure`2">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Actions.K_SpanProcedure`2"/> interface provides a more explicit
            IConstTypeArgs&lt;SpanProcedure&lt;T, TArg&gt;&gt; derived type.
            </summary>
            <typeparam name="T">
            The type of the objects in the span.
            </typeparam>
            <typeparam name="TArg">
            The type of the object that represents the state.
            </typeparam>
            <seealso cref="T:ConstTypeArgs.Delegates.Actions.SpanProcedure`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Actions.K_ReadOnlySpanProcedure`2"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Actions.SpanProcedure`3">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Actions.SpanProcedure`3"/> class provides an argument provider that
            wraps the <see cref="T:ConstTypeArgs.Delegates.Actions.SpanProcedure`2"/> from another argument provider.
            </summary>
            <typeparam name="T">
            The type of the objects in the span.
            </typeparam>
            <typeparam name="TArg">
            The type of the object that represents the state.
            </typeparam>
            <typeparam name="K">
            The type of argument provider containing the value to wrap.
            </typeparam>
            <remarks>
            This class can be useful when creating domain-specific argument providers,
            such as default values, when an argument provider's value needs to be
            wrapped for use in a different context.
            </remarks>
            <seealso cref="T:ConstTypeArgs.Delegates.Actions.ReadOnlySpanProcedure`3"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Comparisons.K_Comparison`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Comparisons.K_Comparison`1"/> interface  provides a more explicit
            <c>IConstTypeArg&lt;Comparison&lt;T&gt;&gt;</c> derived type.
            </summary>
            <typeparam name="T">
            The type of objects to compare.
            </typeparam>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.comparison-1">
            System.Comparison&lt;T&gt;</seealso>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Comparisons.K_ComparisonArray`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Comparisons.K_ComparisonArray`1"/> interface provides a more explicit
            <c>IConstTypeArg&lt;Comparison&lt;T&gt;[]&gt;</c> type.
            </summary>
            <typeparam name="T">
            The type of objects to compare.
            </typeparam>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.comparison-1">
            System.Comparison&lt;T&gt;</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Comparisons.K_Comparison`1"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Comparisons.Comparison`2">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Comparisons.Comparison`2"/> class provides an argument provider that
            wraps the
            <see href="https://learn.microsoft.com/dotnet/api/system.comparison-1">
            System.Comparison&lt;T&gt;</see> value from another argument provider.
            </summary>
            <typeparam name="T">
            The type of objects to compare.
            </typeparam>
            <typeparam name="K">
            The type of argument provider containing the value to wrap.
            </typeparam>
            <remarks>
            This class can be useful when creating domain-specific argument providers,
            such as default values, when an argument provider's value needs to be
            wrapped for use in a different context.
            </remarks>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Comparisons.ComparisonArray`2">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Comparisons.ComparisonArray`2"/> class provides an argument provider that
            wraps the
            <see href="https://learn.microsoft.com/dotnet/api/system.comparison-1">
            System.Comparison&lt;T&gt;</see> array from another argument provider.
            </summary>
            <typeparam name="T">
            The type of objects to compare.
            </typeparam>
            <typeparam name="K">
            The type of argument provider containing the array to wrap.
            </typeparam>
            <remarks>
            This class can be useful when creating domain-specific argument providers,
            such as default values, when an argument provider's value needs to be
            wrapped for use in a different context.
            </remarks>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Converters.K_Converter`2">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Converters.K_Converter`2"/> interface  provides a more explicit
            <c>IConstTypeArg&lt;Converter&lt;TInput, TOutput&gt;&gt;</c> derived type.
            </summary>
            <typeparam name="TInput">
            The type of object that is to be converted.
            </typeparam>
            <typeparam name="TOutput">
            The type the input object is to be converted to.
            </typeparam>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.converter-2">
            System.Converter&lt;TInput, TOutput&gt;</seealso>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Converters.K_ConverterArray`2">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Converters.K_ConverterArray`2"/> interface  provides a more explicit
            <c>IConstTypeArg&lt;Converter&lt;TInput, TOutput&gt;[]&gt;</c> derived type.
            </summary>
            <typeparam name="TInput">
            The type of object that is to be converted.
            </typeparam>
            <typeparam name="TOutput">
            The type the input object is to be converted to.
            </typeparam>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.converter-2">
            System.Converter&lt;TInput, TOutput&gt;</seealso>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Converters.Converter`3">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Converters.Converter`3"/> class provides an argument provider that
            wraps the
            <see href="https://learn.microsoft.com/dotnet/api/system.converter-2">
            System.Converter&lt;TInput, TOutput&gt;</see> value from another argument provider.
            </summary>
            <typeparam name="TInput">
            The type of object that is to be converted.
            </typeparam>
            <typeparam name="TOutput">
            The type the input object is to be converted to.
            </typeparam>
            <typeparam name="K">
            The type of argument provider containing the value to wrap.
            </typeparam>
            <remarks>
            This class can be useful when creating domain-specific argument providers,
            such as default values, when an argument provider's value needs to be
            wrapped for use in a different context.
            </remarks>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Converters.ConverterArray`3">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Converters.Converter`3"/> class provides an argument provider that
            wraps the
            <see href="https://learn.microsoft.com/dotnet/api/system.converter-2">
            System.Converter&lt;TInput, TOutput&gt;</see> array from another argument provider.
            </summary>
            <typeparam name="TInput">
            The type of object that is to be converted.
            </typeparam>
            <typeparam name="TOutput">
            The type the input object is to be converted to.
            </typeparam>
            <typeparam name="K">
            The type of argument provider containing the value to wrap.
            </typeparam>
            <remarks>
            This class can be useful when creating domain-specific argument providers,
            such as default values, when an argument provider's value needs to be
            wrapped for use in a different context.
            </remarks>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Funcs.K_FuncArray`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Funcs.K_FuncArray`1"/> interface provides a more explicit
            <c>IConstTypeArg&lt;System.Func&lt;TResult&gt;[]&gt;</c> derived type.
            </summary>
            <typeparam name="TResult">
            The type of the result.
            </typeparam>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.func-1">
            System.Func&lt;TResult&gt;</seealso>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Funcs.FuncArray`2">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Funcs.FuncArray`2"/> class provides an argument provider that
            wraps the
            <see href="https://learn.microsoft.com/dotnet/api/system.func-1">
            System.Func&lt;TResult&gt;</see> array from another argument provider.
            </summary>
            <typeparam name="TResult">
            The type of the result.
            </typeparam>
            <typeparam name="K">
            The type of argument provider containing the value to wrap.
            </typeparam>
            <remarks>
            This class can be useful when creating domain-specific argument providers,
            such as default values, when an argument provider's value needs to be
            wrapped for use in a different context.
            </remarks>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.func-1">
            System.Func&lt;TResult&gt;</seealso>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Funcs.K_FuncArray`2">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Funcs.K_FuncArray`2"/> interface provides a more explicit
            <c>IConstTypeArg&lt;System.Func&lt;T, TResult&gt;[]&gt;</c> derived type.
            </summary>
            <typeparam name="T">
            The type of input parameter.
            </typeparam>
            <typeparam name="TResult">
            The type of the result.
            </typeparam>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.func-2">
            System.Func&lt;T, TResult&gt;</seealso>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Funcs.FuncArray`3">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Funcs.FuncArray`3"/> class provides an argument provider that
            wraps the
            <see href="https://learn.microsoft.com/dotnet/api/system.func-2">
            System.Func&lt;T, TResult&gt;</see> array from another argument provider.
            </summary>
            <typeparam name="T">
            The type of input parameter.
            </typeparam>
            <typeparam name="TResult">
            The type of the result.
            </typeparam>
            <typeparam name="K">
            The type of argument provider containing the value to wrap.
            </typeparam>
            <remarks>
            This class can be useful when creating domain-specific argument providers,
            such as default values, when an argument provider's value needs to be
            wrapped for use in a different context.
            </remarks>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.func-2">
            System.Func&lt;T1, TResult&gt;</seealso>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Funcs.K_FuncArray`3">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Funcs.K_FuncArray`3"/> interface provides a more explicit
            <c>IConstTypeArg&lt;System.Func&lt;T1, T2, TResult&gt;[]&gt;</c> derived type.
            </summary>
            <typeparam name="T1">
            The type of the first input parameter.
            </typeparam>
            <typeparam name="T2">
            The type of the second input parameter.
            </typeparam>
            <typeparam name="TResult">
            The type of the result.
            </typeparam>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.func-3">
            System.Func&lt;T1, T2, TResult&gt;</seealso>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Funcs.FuncArray`4">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Funcs.FuncArray`4"/> class provides an argument provider that
            wraps the
            <see href="https://learn.microsoft.com/dotnet/api/system.func-3">
            System.Func&lt;T1, T2, TResult&gt;</see> array from another argument provider.
            </summary>
            <typeparam name="T1">
            The type of the first input parameter.
            </typeparam>
            <typeparam name="T2">
            The type of the second input parameter.
            </typeparam>
            <typeparam name="TResult">
            The type of the result.
            </typeparam>
            <typeparam name="K">
            The type of argument provider containing the value to wrap.
            </typeparam>
            <remarks>
            This class can be useful when creating domain-specific argument providers,
            such as default values, when an argument provider's value needs to be
            wrapped for use in a different context.
            </remarks>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.func-3">
            System.Func&lt;T1, T2, TResult&gt;</seealso>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Funcs.K_FuncArray`4">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Funcs.K_FuncArray`4"/> interface provides a more explicit
            <c>IConstTypeArg&lt;System.Func&lt;T1, T2, T3, TResult&gt;[]&gt;</c> derived type.
            </summary>
            <typeparam name="T1">
            The type of the first input parameter.
            </typeparam>
            <typeparam name="T2">
            The type of the second input parameter.
            </typeparam>
            <typeparam name="T3">
            The type of the third input parameter.
            </typeparam>
            <typeparam name="TResult">
            The type of the result.
            </typeparam>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.func-4">
            System.Func&lt;T1, T2, T3, TResult&gt;</seealso>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Funcs.FuncArray`5">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Funcs.FuncArray`5"/> class provides an argument provider that
            wraps the
            <see href="https://learn.microsoft.com/dotnet/api/system.func-4">
            System.Func&lt;T1, T2, T3, TResult&gt;</see> array from another argument provider.
            </summary>
            <typeparam name="T1">
            The type of the first input parameter.
            </typeparam>
            <typeparam name="T2">
            The type of the second input parameter.
            </typeparam>
            <typeparam name="T3">
            The type of the third input parameter.
            </typeparam>
            <typeparam name="TResult">
            The type of the result.
            </typeparam>
            <typeparam name="K">
            The type of argument provider containing the value to wrap.
            </typeparam>
            <remarks>
            This class can be useful when creating domain-specific argument providers,
            such as default values, when an argument provider's value needs to be
            wrapped for use in a different context.
            </remarks>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.func-4">
            System.Func&lt;T1, T2, T3, TResult&gt;</seealso>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Funcs.K_FuncArray`5">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Funcs.K_FuncArray`5"/> interface provides a more explicit
            <c>IConstTypeArg&lt;System.Func&lt;T1, T2, T3, T4, TResult&gt;[]&gt;</c> derived type.
            </summary>
            <typeparam name="T1">
            The type of the first input parameter.
            </typeparam>
            <typeparam name="T2">
            The type of the second input parameter.
            </typeparam>
            <typeparam name="T3">
            The type of the third input parameter.
            </typeparam>
            <typeparam name="T4">
            The type of the fourth input parameter.
            </typeparam>
            <typeparam name="TResult">
            The type of the result.
            </typeparam>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.func-5">
            System.Func&lt;T1, T2, T3, T4, TResult&gt;</seealso>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Funcs.FuncArray`6">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Funcs.FuncArray`6"/> class provides an argument provider that
            wraps the
            <see href="https://learn.microsoft.com/dotnet/api/system.func-5">
            System.Func&lt;T1, T2, T3, T4, TResult&gt;</see> array from another argument provider.
            </summary>
            <typeparam name="T1">
            The type of the first input parameter.
            </typeparam>
            <typeparam name="T2">
            The type of the second input parameter.
            </typeparam>
            <typeparam name="T3">
            The type of the third input parameter.
            </typeparam>
            <typeparam name="T4">
            The type of the fourth input parameter.
            </typeparam>
            <typeparam name="TResult">
            The type of the result.
            </typeparam>
            <typeparam name="K">
            The type of argument provider containing the value to wrap.
            </typeparam>
            <remarks>
            This class can be useful when creating domain-specific argument providers,
            such as default values, when an argument provider's value needs to be
            wrapped for use in a different context.
            </remarks>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.func-5">
            System.Func&lt;T1, T2, T3, T4, TResult&gt;</seealso>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Funcs.K_Function`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Funcs.K_Function`1"/> interface provides a more explicit
            <c>IConstTypeArg&lt;Func&lt;TResult&gt;&gt;</c> derived type.
            </summary>
            <typeparam name="TResult">
            The return type of the function.
            </typeparam>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.func-1">
            System.Func&lt;TResult&gt;</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Actions.K_Procedure"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Funcs.K_Function`2">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Funcs.K_Function`2"/> interface provides a more explicit
            <c>IConstTypeArg&lt;Func&lt;T, TResult&gt;&gt;</c> derived type.
            </summary>
            <typeparam name="T">
            The type of input parameter.
            </typeparam>
            <typeparam name="TResult">
            The return type of the function.
            </typeparam>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.func-2">
            System.Func&lt;T, TResult&gt;</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Actions.K_Procedure`1"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Funcs.K_Function`3">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Funcs.K_Function`3"/> interface provides a more explicit
            <c>IConstTypeArg&lt;Func&lt;T1, T2, TResult&gt;&gt;</c> derived type.
            </summary>
            <typeparam name="T1">
            The type of the first input parameter.
            </typeparam>
            <typeparam name="T2">
            The type of the second input parameter.
            </typeparam>
            <typeparam name="TResult">
            The return type of the function.
            </typeparam>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.func-3">
            System.Func&lt;T1, T2, TResult&gt;</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Actions.K_Procedure`2"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Funcs.K_Function`4">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Funcs.K_Function`4"/> interface provides a more explicit
            <c>IConstTypeArg&lt;Func&lt;T1, T2, T3, TResult&gt;&gt;</c> derived type.
            </summary>
            <typeparam name="T1">
            The type of the first input parameter.
            </typeparam>
            <typeparam name="T2">
            The type of the second input parameter.
            </typeparam>
            <typeparam name="T3">
            The type of the third input parameter.
            </typeparam>
            <typeparam name="TResult">
            The return type of the function.
            </typeparam>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.func-4">
            System.Func&lt;T1, T2, T3, TResult&gt;</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Actions.K_Procedure`3"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Funcs.K_Function`5">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Funcs.K_Function`5"/> interface provides a more explicit
            <c>IConstTypeArg&lt;Func&lt;T1, T2, T3, T4, TResult&gt;&gt;</c> derived type.
            </summary>
            <typeparam name="T1">
            The type of the first input parameter.
            </typeparam>
            <typeparam name="T2">
            The type of the second input parameter.
            </typeparam>
            <typeparam name="T3">
            The type of the third input parameter.
            </typeparam>
            <typeparam name="T4">
            The type of the fourth input parameter.
            </typeparam>
            <typeparam name="TResult">
            The return type of the function.
            </typeparam>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.func-5">
            System.Func&lt;T1, T2, T3, T4, TResult&gt;</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Actions.K_Procedure`4"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Funcs.K_Function`6">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Funcs.K_Function`6"/> interface provides a more explicit
            <c>IConstTypeArg&lt;Func&lt;T1, T2, T3, T4, T5, TResult&gt;&gt;</c> derived type.
            </summary>
            <typeparam name="T1">
            The type of the first input parameter.
            </typeparam>
            <typeparam name="T2">
            The type of the second input parameter.
            </typeparam>
            <typeparam name="T3">
            The type of the third input parameter.
            </typeparam>
            <typeparam name="T4">
            The type of the fourth input parameter.
            </typeparam>
            <typeparam name="T5">
            The type of the fifth input parameter.
            </typeparam>
            <typeparam name="TResult">
            The return type of the function.
            </typeparam>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.func-6">
            System.Func&lt;T1, T2, T3, T4, T5, TResult&gt;</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Actions.K_Procedure`5"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Funcs.K_Function`7">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Funcs.K_Function`7"/> interface provides a more explicit
            <c>IConstTypeArg&lt;Func&lt;T1, T2, T3, T4, T5, T6, TResult&gt;&gt;</c> derived type.
            </summary>
            <typeparam name="T1">
            The type of the first input parameter.
            </typeparam>
            <typeparam name="T2">
            The type of the second input parameter.
            </typeparam>
            <typeparam name="T3">
            The type of the third input parameter.
            </typeparam>
            <typeparam name="T4">
            The type of the fourth input parameter.
            </typeparam>
            <typeparam name="T5">
            The type of the fifth input parameter.
            </typeparam>
            <typeparam name="T6">
            The type of the sixth input parameter.
            </typeparam>
            <typeparam name="TResult">
            The return type of the function.
            </typeparam>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.func-7">
            System.Func&lt;T1, T2, T3, T4, T5, T6, TResult&gt;</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Actions.K_Procedure`6"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Funcs.K_Function`8">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Funcs.K_Function`8"/> interface provides a more explicit
            <c>IConstTypeArg&lt;Func&lt;T1, T2, T3, T4, T5, T6, T7, TResult&gt;&gt;</c> derived type.
            </summary>
            <typeparam name="T1">
            The type of the first input parameter.
            </typeparam>
            <typeparam name="T2">
            The type of the second input parameter.
            </typeparam>
            <typeparam name="T3">
            The type of the third input parameter.
            </typeparam>
            <typeparam name="T4">
            The type of the fourth input parameter.
            </typeparam>
            <typeparam name="T5">
            The type of the fifth input parameter.
            </typeparam>
            <typeparam name="T6">
            The type of the sixth input parameter.
            </typeparam>
            <typeparam name="T7">
            The type of the seventh input parameter.
            </typeparam>
            <typeparam name="TResult">
            The return type of the function.
            </typeparam>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.func-8">
            System.Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, TResult&gt;</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Actions.K_Procedure`7"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Funcs.K_Function`9">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Funcs.K_Function`9"/> interface provides a more explicit
            <c>IConstTypeArg&lt;Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, TResult&gt;&gt;</c> derived type.
            </summary>
            <typeparam name="T1">
            The type of the first input parameter.
            </typeparam>
            <typeparam name="T2">
            The type of the second input parameter.
            </typeparam>
            <typeparam name="T3">
            The type of the third input parameter.
            </typeparam>
            <typeparam name="T4">
            The type of the fourth input parameter.
            </typeparam>
            <typeparam name="T5">
            The type of the fifth input parameter.
            </typeparam>
            <typeparam name="T6">
            The type of the sixth input parameter.
            </typeparam>
            <typeparam name="T7">
            The type of the seventh input parameter.
            </typeparam>
            <typeparam name="T8">
            The type of the eighth input parameter.
            </typeparam>
            <typeparam name="TResult">
            The return type of the function.
            </typeparam>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.func-9">
            System.Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, TResult&gt;</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Actions.K_Procedure`8"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Funcs.K_Function`10">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Funcs.K_Function`10"/> interface provides a more explicit
            <c>IConstTypeArg&lt;Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult&gt;&gt;</c> derived type.
            </summary>
            <typeparam name="T1">
            The type of the first input parameter.
            </typeparam>
            <typeparam name="T2">
            The type of the second input parameter.
            </typeparam>
            <typeparam name="T3">
            The type of the third input parameter.
            </typeparam>
            <typeparam name="T4">
            The type of the fourth input parameter.
            </typeparam>
            <typeparam name="T5">
            The type of the fifth input parameter.
            </typeparam>
            <typeparam name="T6">
            The type of the sixth input parameter.
            </typeparam>
            <typeparam name="T7">
            The type of the seventh input parameter.
            </typeparam>
            <typeparam name="T8">
            The type of the eighth input parameter.
            </typeparam>
            <typeparam name="T9">
            The type of the ninth input parameter.
            </typeparam>
            <typeparam name="TResult">
            The return type of the function.
            </typeparam>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.func-10">
            System.Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult&gt;</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Actions.K_Procedure`9"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Funcs.K_Function`11">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Funcs.K_Function`11"/> interface provides a more explicit
            <c>IConstTypeArg&lt;Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult&gt;&gt;</c> derived type.
            </summary>
            <typeparam name="T1">
            The type of the first input parameter.
            </typeparam>
            <typeparam name="T2">
            The type of the second input parameter.
            </typeparam>
            <typeparam name="T3">
            The type of the third input parameter.
            </typeparam>
            <typeparam name="T4">
            The type of the fourth input parameter.
            </typeparam>
            <typeparam name="T5">
            The type of the fifth input parameter.
            </typeparam>
            <typeparam name="T6">
            The type of the sixth input parameter.
            </typeparam>
            <typeparam name="T7">
            The type of the seventh input parameter.
            </typeparam>
            <typeparam name="T8">
            The type of the eighth input parameter.
            </typeparam>
            <typeparam name="T9">
            The type of the ninth input parameter.
            </typeparam>
            <typeparam name="T10">
            The type of the tenth input parameter.
            </typeparam>
            <typeparam name="TResult">
            The return type of the function.
            </typeparam>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.func-11">
            System.Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult&gt;</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Actions.K_Procedure`10"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Funcs.K_Function`12">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Funcs.K_Function`12"/> interface provides a more explicit
            <c>IConstTypeArg&lt;Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult&gt;&gt;</c> derived type.
            </summary>
            <typeparam name="T1">
            The type of the first input parameter.
            </typeparam>
            <typeparam name="T2">
            The type of the second input parameter.
            </typeparam>
            <typeparam name="T3">
            The type of the third input parameter.
            </typeparam>
            <typeparam name="T4">
            The type of the fourth input parameter.
            </typeparam>
            <typeparam name="T5">
            The type of the fifth input parameter.
            </typeparam>
            <typeparam name="T6">
            The type of the sixth input parameter.
            </typeparam>
            <typeparam name="T7">
            The type of the seventh input parameter.
            </typeparam>
            <typeparam name="T8">
            The type of the eighth input parameter.
            </typeparam>
            <typeparam name="T9">
            The type of the ninth input parameter.
            </typeparam>
            <typeparam name="T10">
            The type of the tenth input parameter.
            </typeparam>
            <typeparam name="T11">
            The type of the eleventh input parameter.
            </typeparam>
            <typeparam name="TResult">
            The return type of the function.
            </typeparam>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.func-12">
            System.Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult&gt;</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Actions.K_Procedure`11"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Funcs.K_Function`13">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Funcs.K_Function`13"/> interface provides a more explicit
            <c>IConstTypeArg&lt;Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult&gt;&gt;</c> derived type.
            </summary>
            <typeparam name="T1">
            The type of the first input parameter.
            </typeparam>
            <typeparam name="T2">
            The type of the second input parameter.
            </typeparam>
            <typeparam name="T3">
            The type of the third input parameter.
            </typeparam>
            <typeparam name="T4">
            The type of the fourth input parameter.
            </typeparam>
            <typeparam name="T5">
            The type of the fifth input parameter.
            </typeparam>
            <typeparam name="T6">
            The type of the sixth input parameter.
            </typeparam>
            <typeparam name="T7">
            The type of the seventh input parameter.
            </typeparam>
            <typeparam name="T8">
            The type of the eighth input parameter.
            </typeparam>
            <typeparam name="T9">
            The type of the ninth input parameter.
            </typeparam>
            <typeparam name="T10">
            The type of the tenth input parameter.
            </typeparam>
            <typeparam name="T11">
            The type of the eleventh input parameter.
            </typeparam>
            <typeparam name="T12">
            The type of the twelfth input parameter.
            </typeparam>
            <typeparam name="TResult">
            The return type of the function.
            </typeparam>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.func-13">
            System.Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult&gt;</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Actions.K_Procedure`12"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Funcs.K_Function`14">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Funcs.K_Function`14"/> interface provides a more explicit
            <c>IConstTypeArg&lt;Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult&gt;&gt;</c> derived type.
            </summary>
            <typeparam name="T1">
            The type of the first input parameter.
            </typeparam>
            <typeparam name="T2">
            The type of the second input parameter.
            </typeparam>
            <typeparam name="T3">
            The type of the third input parameter.
            </typeparam>
            <typeparam name="T4">
            The type of the fourth input parameter.
            </typeparam>
            <typeparam name="T5">
            The type of the fifth input parameter.
            </typeparam>
            <typeparam name="T6">
            The type of the sixth input parameter.
            </typeparam>
            <typeparam name="T7">
            The type of the seventh input parameter.
            </typeparam>
            <typeparam name="T8">
            The type of the eighth input parameter.
            </typeparam>
            <typeparam name="T9">
            The type of the ninth input parameter.
            </typeparam>
            <typeparam name="T10">
            The type of the tenth input parameter.
            </typeparam>
            <typeparam name="T11">
            The type of the eleventh input parameter.
            </typeparam>
            <typeparam name="T12">
            The type of the twelfth input parameter.
            </typeparam>
            <typeparam name="T13">
            The type of the thirteenth input parameter.
            </typeparam>
            <typeparam name="TResult">
            The return type of the function.
            </typeparam>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.func-14">
            System.Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult&gt;</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Actions.K_Procedure`13"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Funcs.K_Function`15">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Funcs.K_Function`15"/> interface provides a more explicit
            <c>IConstTypeArg&lt;Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult&gt;&gt;</c> derived type.
            </summary>
            <typeparam name="T1">
            The type of the first input parameter.
            </typeparam>
            <typeparam name="T2">
            The type of the second input parameter.
            </typeparam>
            <typeparam name="T3">
            The type of the third input parameter.
            </typeparam>
            <typeparam name="T4">
            The type of the fourth input parameter.
            </typeparam>
            <typeparam name="T5">
            The type of the fifth input parameter.
            </typeparam>
            <typeparam name="T6">
            The type of the sixth input parameter.
            </typeparam>
            <typeparam name="T7">
            The type of the seventh input parameter.
            </typeparam>
            <typeparam name="T8">
            The type of the eighth input parameter.
            </typeparam>
            <typeparam name="T9">
            The type of the ninth input parameter.
            </typeparam>
            <typeparam name="T10">
            The type of the tenth input parameter.
            </typeparam>
            <typeparam name="T11">
            The type of the eleventh input parameter.
            </typeparam>
            <typeparam name="T12">
            The type of the twelfth input parameter.
            </typeparam>
            <typeparam name="T13">
            The type of the thirteenth input parameter.
            </typeparam>
            <typeparam name="T14">
            The type of the fourteenth input parameter.
            </typeparam>
            <typeparam name="TResult">
            The return type of the function.
            </typeparam>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.func-15">
            System.Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult&gt;</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Actions.K_Procedure`14"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Funcs.K_Function`16">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Funcs.K_Function`16"/> interface provides a more explicit
            <c>IConstTypeArg&lt;Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult&gt;&gt;</c> derived type.
            </summary>
            <typeparam name="T1">
            The type of the first input parameter.
            </typeparam>
            <typeparam name="T2">
            The type of the second input parameter.
            </typeparam>
            <typeparam name="T3">
            The type of the third input parameter.
            </typeparam>
            <typeparam name="T4">
            The type of the fourth input parameter.
            </typeparam>
            <typeparam name="T5">
            The type of the fifth input parameter.
            </typeparam>
            <typeparam name="T6">
            The type of the sixth input parameter.
            </typeparam>
            <typeparam name="T7">
            The type of the seventh input parameter.
            </typeparam>
            <typeparam name="T8">
            The type of the eighth input parameter.
            </typeparam>
            <typeparam name="T9">
            The type of the ninth input parameter.
            </typeparam>
            <typeparam name="T10">
            The type of the tenth input parameter.
            </typeparam>
            <typeparam name="T11">
            The type of the eleventh input parameter.
            </typeparam>
            <typeparam name="T12">
            The type of the twelfth input parameter.
            </typeparam>
            <typeparam name="T13">
            The type of the thirteenth input parameter.
            </typeparam>
            <typeparam name="T14">
            The type of the fourteenth input parameter.
            </typeparam>
            <typeparam name="T15">
            The type of the fifteenth input parameter.
            </typeparam>
            <typeparam name="TResult">
            The return type of the function.
            </typeparam>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.func-16">
            System.Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult&gt;</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Actions.K_Procedure`15"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Funcs.K_Function`17">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Funcs.K_Function`17"/> interface provides a more explicit
            <c>IConstTypeArg&lt;Func&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,TResult&gt;&gt;</c> derived type.
            </summary>
            <typeparam name="T1">
            The type of the first input parameter.
            </typeparam>
            <typeparam name="T2">
            The type of the second input parameter.
            </typeparam>
            <typeparam name="T3">
            The type of the third input parameter.
            </typeparam>
            <typeparam name="T4">
            The type of the fourth input parameter.
            </typeparam>
            <typeparam name="T5">
            The type of the fifth input parameter.
            </typeparam>
            <typeparam name="T6">
            The type of the sixth input parameter.
            </typeparam>
            <typeparam name="T7">
            The type of the seventh input parameter.
            </typeparam>
            <typeparam name="T8">
            The type of the eighth input parameter.
            </typeparam>
            <typeparam name="T9">
            The type of the ninth input parameter.
            </typeparam>
            <typeparam name="T10">
            The type of the tenth input parameter.
            </typeparam>
            <typeparam name="T11">
            The type of the eleventh input parameter.
            </typeparam>
            <typeparam name="T12">
            The type of the twelfth input parameter.
            </typeparam>
            <typeparam name="T13">
            The type of the thirteenth input parameter.
            </typeparam>
            <typeparam name="T14">
            The type of the fourteenth input parameter.
            </typeparam>
            <typeparam name="T15">
            The type of the fifteenth input parameter.
            </typeparam>
            <typeparam name="T16">
            The type of the sixteenth input parameter.
            </typeparam>
            <typeparam name="TResult">
            The return type of the function.
            </typeparam>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.func-17">
            System.Func&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, 16, TResult&gt;</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Actions.K_Procedure`16"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Funcs.Function`2">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Funcs.Function`2"/> class provides an argument provider that
            wraps the
            <see href="https://learn.microsoft.com/dotnet/api/system.func-1">
            System.Func&lt;TResult&gt;</see> value from another argument provider.
            </summary>
            <typeparam name="TResult">
            The type of output.
            </typeparam>
            <typeparam name="K">
            The type of argument provider containing the value to wrap.
            </typeparam>
            <remarks>
            This class can be useful when creating domain-specific argument providers,
            such as default values, when an argument provider's value needs to be
            wrapped for use in a different context.
            </remarks>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Funcs.Function`3">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Funcs.Function`3"/> class provides an argument provider that
            wraps the
            <see href="https://learn.microsoft.com/dotnet/api/system.func-2">
            System.Func&lt;T, TResult&gt;</see> value from another argument provider.
            </summary>
            <typeparam name="T">
            The type of input parameter.
            </typeparam>
            <typeparam name="TResult">
            The type of output.
            </typeparam>
            <typeparam name="K">
            The type of argument provider containing the value to wrap.
            </typeparam>
            <remarks>
            This class can be useful when creating domain-specific argument providers,
            such as default values, when an argument provider's value needs to be
            wrapped for use in a different context.
            </remarks>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Funcs.Function`4">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Funcs.Function`4"/> class provides an argument provider that
            wraps the
            <see href="https://learn.microsoft.com/dotnet/api/system.func-3">
            System.Func&lt;T1, T2, TResult&gt;</see> value from another argument provider.
            </summary>
            <typeparam name="T1">
            The type of the first input parameter.
            </typeparam>
            <typeparam name="T2">
            The type of the second input parameter.
            </typeparam>
            <typeparam name="TResult">
            The type of output.
            </typeparam>
            <typeparam name="K">
            The type of argument provider containing the value to wrap.
            </typeparam>
            <remarks>
            This class can be useful when creating domain-specific argument providers,
            such as default values, when an argument provider's value needs to be
            wrapped for use in a different context.
            </remarks>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Funcs.Function`5">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Funcs.Function`5"/> class provides an argument provider that
            wraps the
            <see href="https://learn.microsoft.com/dotnet/api/system.func-4">
            System.Func&lt;T1, T2, T3, TResult&gt;</see> value from another argument provider.
            </summary>
            <typeparam name="T1">
            The type of the first input parameter.
            </typeparam>
            <typeparam name="T2">
            The type of the second input parameter.
            </typeparam>
            <typeparam name="T3">
            The type of the third input parameter.
            </typeparam>
            <typeparam name="TResult">
            The type of output.
            </typeparam>
            <typeparam name="K">
            The type of argument provider containing the value to wrap.
            </typeparam>
            <remarks>
            This class can be useful when creating domain-specific argument providers,
            such as default values, when an argument provider's value needs to be
            wrapped for use in a different context.
            </remarks>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Funcs.Function`6">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Funcs.Function`6"/> class provides an argument provider that
            wraps the
            <see href="https://learn.microsoft.com/dotnet/api/system.func-5">
            System.Func&lt;T1, T2, T3, T4, TResult&gt;</see> value from another argument provider.
            </summary>
            <typeparam name="T1">
            The type of the first input parameter.
            </typeparam>
            <typeparam name="T2">
            The type of the second input parameter.
            </typeparam>
            <typeparam name="T3">
            The type of the third input parameter.
            </typeparam>
            <typeparam name="T4">
            The type of the fourth input parameter.
            </typeparam>
            <typeparam name="TResult">
            The type of output.
            </typeparam>
            <typeparam name="K">
            The type of argument provider containing the value to wrap.
            </typeparam>
            <remarks>
            This class can be useful when creating domain-specific argument providers,
            such as default values, when an argument provider's value needs to be
            wrapped for use in a different context.
            </remarks>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Funcs.RefFunction`2">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Funcs.RefFunction`2"/> delegate is a function that
            takes a reference to a value of type <typeparamref name="T"/>
            </summary>
            <typeparam name="T">
            The type of the value to be passed by reference.
            </typeparam>
            <typeparam name="TResult">
            The type of the value to be returned.
            </typeparam>
            <param name="reference">
            The reference to the value of type <typeparamref name="T"/>.
            </param>
            <returns>
            A value of type <typeparamref name="TResult"/>.
            </returns>
            <seealso cref="T:ConstTypeArgs.Delegates.Funcs.RefFunction`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Funcs.RefFunction`4"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Actions.RefProcedure`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Actions.RefProcedure`2"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Funcs.K_RefFunction`2"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Funcs.K_RefFunction`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Funcs.K_RefFunction`4"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Funcs.RefFunction`3">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Funcs.RefFunction`3"/> delegate is a function that
            takes a reference to a value of type <typeparamref name="T"/>
            and an argument type <typeparamref name="TArg"/>.
            </summary>
            <typeparam name="T">
            The type of the value to be passed by reference.
            </typeparam>
            <typeparam name="TArg">
            The type encapsulating the remaining arguments to be passed in.
            </typeparam>
            <typeparam name="TResult">
            The type of the value to be returned.
            </typeparam>
            <param name="reference">
            The reference to the value of type <typeparamref name="T"/>.
            </param>
            <param name="arg">
            The remaining arguments to be passed in.
            </param>
            <returns>
            A value of type <typeparamref name="TResult"/>.
            </returns>
            <seealso cref="T:ConstTypeArgs.Delegates.Funcs.RefFunction`2"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Funcs.RefFunction`4"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Actions.RefProcedure`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Actions.RefProcedure`2"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Funcs.K_RefFunction`2"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Funcs.K_RefFunction`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Funcs.K_RefFunction`4"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Funcs.RefFunction`4">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Funcs.RefFunction`4"/> delegate is a function that
            takes a reference to a value of type <typeparamref name="T"/> and additional arguments
            <typeparamref name="TArg1"/> &amp; <typeparamref name="TArg2"/>.
            </summary>
            <typeparam name="T">
            The type of the value to be passed by reference.
            </typeparam>
            <typeparam name="TArg1">
            The type of the first argument to be passed in.
            </typeparam>
            <typeparam name="TArg2">
            The type of the second argument to be passed in.
            </typeparam>
            <typeparam name="TResult">
            The type of the value to be returned.
            </typeparam>
            <param name="reference">
            The reference to the value of type <typeparamref name="T"/>.
            </param>
            <param name="arg1">
            The first argument to be passed in.
            </param>
            <param name="arg2">
            The second argument to be passed in.
            </param>
            <returns>
            A value of type <typeparamref name="TResult"/>.
            </returns>
            <seealso cref="T:ConstTypeArgs.Delegates.Funcs.RefFunction`2"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Funcs.RefFunction`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Actions.RefProcedure`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Actions.RefProcedure`2"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Funcs.K_RefFunction`2"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Funcs.K_RefFunction`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Funcs.K_RefFunction`4"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Funcs.K_RefFunction`2">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Funcs.K_RefFunction`2"/> interface provides a more explicit
            IConstTypeArg&lt;RefFunc&lt;T, TResult&gt;&gt; derived type.
            </summary>
            <typeparam name="T">
            The type of the value to be passed by reference.
            </typeparam>
            <typeparam name="TResult">
            The type of the value to be returned.
            </typeparam>
            <seealso cref="T:ConstTypeArgs.Delegates.Funcs.K_RefFunction`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Actions.K_RefProcedure`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Actions.K_RefProcedure`2"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Funcs.RefFunction`2"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Funcs.RefFunction`3"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Funcs.K_RefFunction`3">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Funcs.K_RefFunction`3"/> interface provides a more explicit
            IConstTypeArg&lt;RefFunc&lt;T, TArg, TResult&gt;&gt; derived type.
            </summary>
            <typeparam name="T">
            The type of the value to be passed by reference.
            </typeparam>
            <typeparam name="TArg">
            The type of argument to be passed in.
            </typeparam>
            <typeparam name="TResult">
            The type of the value to be returned.
            </typeparam>
            <seealso cref="T:ConstTypeArgs.Delegates.Funcs.K_RefFunction`2"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Actions.K_RefProcedure`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Actions.K_RefProcedure`2"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Funcs.K_RefFunction`4"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Funcs.RefFunction`2"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Funcs.RefFunction`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Funcs.RefFunction`4"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Funcs.K_RefFunction`4">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Funcs.K_RefFunction`4"/> interface provides a more explicit
            IConstTypeArg&lt;RefFunc&lt;T, TArg1, TArg2, TResult&gt;&gt; derived type.
            </summary>
            <typeparam name="T">
            The type of the value to be passed by reference.
            </typeparam>
            <typeparam name="TArg1">
            The type of the first argument to be passed in.
            </typeparam>
            <typeparam name="TArg2">
            The type of the second argument to be passed in.
            </typeparam>
            <typeparam name="TResult">
            The type of the value to be returned.
            </typeparam>
            <seealso cref="T:ConstTypeArgs.Delegates.Funcs.K_RefFunction`2"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Funcs.K_RefFunction`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Actions.K_RefProcedure`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Actions.K_RefProcedure`2"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Funcs.RefFunction`2"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Funcs.RefFunction`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Funcs.RefFunction`4"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.AddInt32">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.AddInt32"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.add#system-threading-interlocked-add(system-int32@-system-int32)">
            Interlocked.Add(ref int, int)</see> which is an atomic operation that adds the second parameter
            to the value of the first and returns the new value that was stored in the first parameter.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.AddInt32.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.AddK_Int32`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.AddK_Int32`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.add#system-threading-interlocked-add(system-int32@-system-int32)">
            Interlocked.Add(ref int, int)</see> which is an atomic operation that adds the value of the const type argument <typeparamref name="K"/>
            to the value of the first and returns the new value that was stored in the first parameter.
            </summary>
            <typeparam name="K">
            The const type argument containing the value to add to the first parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.AddK_Int32`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.AddUInt32">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.AddUInt32"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.add#system-threading-interlocked-add(system-uint32@-system-uint32)">
            Interlocked.Add(ref uint, uint)</see> which is an atomic operation that adds the second parameter
            to the value of the first and returns the new value that was stored in the first parameter.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.AddUInt32.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.AddK_UInt32`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.AddK_UInt32`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.add#system-threading-interlocked-add(system-uint32@-system-uint32)">
            Interlocked.Add(ref uint, uint)</see> which is an atomic operation that adds the value of the const type argument <typeparamref name="K"/>
            to the value of the first and returns the new value that was stored in the first parameter.
            </summary>
            <typeparam name="K">
            The const type argument containing the value to add to the first parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.AddK_UInt32`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.AddInt64">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.AddInt64"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.add#system-threading-interlocked-add(system-int64@-system-int64)">
            Interlocked.Add(ref long, long)</see> which is an atomic operation that adds the second parameter
            to the value of the first and returns the new value that was stored in the first parameter.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.AddInt64.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.AddK_Int64`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.AddK_Int64`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.add#system-threading-interlocked-add(system-int64@-system-int64)">
            Interlocked.Add(ref long, long)</see> which is an atomic operation that adds the value of the const type argument <typeparamref name="K"/>
            to the value of the first and returns the new value that was stored in the first parameter.
            </summary>
            <typeparam name="K">
            The const type argument containing the value to add to the first parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.AddK_Int64`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.AddUInt64">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.AddUInt64"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.add#system-threading-interlocked-add(system-uint64@-system-uint64)">
            Interlocked.Add(ref ulong, ulong)</see> which is an atomic operation that adds the second parameter
            to the value of the first and returns the new value that was stored in the first parameter.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.AddUInt64.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.AddK_UInt64`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.AddK_UInt64`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.add#system-threading-interlocked-add(system-uint64@-system-uint64)">
            Interlocked.Add(ref ulong, ulong)</see> which is an atomic operation that adds the value of the const type argument <typeparamref name="K"/>
            to the value of the first and returns the new value that was stored in the first parameter.
            </summary>
            <typeparam name="K">
            The const type argument containing the value to add to the first parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.AddK_UInt64`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.AndInt32">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.AndInt32"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.and#system-threading-interlocked-and(system-int32@-system-int32)">
            Interlocked.And(ref int, int)</see> which is an atomic operation that performs a bitwise AND operation on the value of the first parameter
            with the second and returns the original value.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.AndInt32.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.AndInt32`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.AndInt32`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.and#system-threading-interlocked-and(system-int32@-system-int32)">
            Interlocked.And(ref int, int)</see> which is an atomic operation that performs a bitwise AND operation on the value of the first parameter
            with the value of the const type argument <typeparamref name="K"/> and
            returns the original value.
            </summary>
            <typeparam name="K">
            The const type argument containing the second value for the AND operation.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.AndInt32`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.AndUInt32">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.AndUInt32"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.and#system-threading-interlocked-and(system-uint32@-system-uint32)">
            Interlocked.And(ref uint, uint)</see> which is an atomic operation that performs a bitwise AND operation on the value of the first parameter
            with the second and returns the original value.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.AndUInt32.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.AndUInt32`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.AndUInt32`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.and#system-threading-interlocked-and(system-uint32@-system-uint32)">
            Interlocked.And(ref uint, uint)</see> which is an atomic operation that performs a bitwise AND operation on the value of the first parameter
            with the value of the const type argument <typeparamref name="K"/> and
            returns the original value.
            </summary>
            <typeparam name="K">
            The const type argument containing the second value for the AND operation.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.AndUInt32`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.AndInt64">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.AndInt64"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.and#system-threading-interlocked-and(system-int64@-system-int64)">
            Interlocked.And(ref long, long)</see> which is an atomic operation that performs a bitwise AND operation on the value of the first parameter
            with the second and returns the original value.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.AndInt64.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.AndInt64`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.AndInt64`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.and#system-threading-interlocked-and(system-int64@-system-int64)">
            Interlocked.And(ref long, long)</see> which is an atomic operation that performs a bitwise AND operation on the value of the first parameter
            with the value of the const type argument <typeparamref name="K"/> and
            returns the original value.
            </summary>
            <typeparam name="K">
            The const type argument containing the second value for the AND operation.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.AndInt64`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.AndUInt64">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.AndUInt64"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.and#system-threading-interlocked-and(system-uint64@-system-uint64)">
            Interlocked.And(ref ulong, ulong)</see> which is an atomic operation that performs a bitwise AND operation on the value of the first parameter
            with the second and returns the original value.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.AndUInt64.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.AndUInt64`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.AndUInt64`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.and#system-threading-interlocked-and(system-uint64@-system-uint64)">
            Interlocked.And(ref ulong, ulong)</see> which is an atomic operation that performs a bitwise AND operation on the value of the first parameter
            with the value of the const type argument <typeparamref name="K"/> and
            returns the original value.
            </summary>
            <typeparam name="K">
            The const type argument containing the second value for the AND operation.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.AndUInt64`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeInt32">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeInt32"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-int32@-system-int32-system-int32)">
            Interlocked.CompareExchange(ref int, int, int)</see> that is an atomic operation that compares the value of the first parameter
            with the third,
            and if equal, replaces the first parameter's value with the second .
            The first parameter's original value is returned.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareExchangeInt32.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeInt32`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeInt32`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-int32@-system-int32-system-int32)">
            Interlocked.CompareExchange(ref int, int, int)</see> that is an atomic operation that compares the value of the first parameter
            to the value of the const type argument <typeparamref name="K"/>.
            If equal, the first parameter's value is replaced with the value of the second.
            The original value is returned.
            </summary>
            <typeparam name="K">
            The const type argument containing the value to compare with the third parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeInt32`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeK_Int32`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeK_Int32`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-int32@-system-int32-system-int32)">
            Interlocked.CompareExchange(ref int, int, int)</see> that is an atomic operation that compares the value of the first parameter
            with the second.
            If equal, the first parameter's value is replaced with the value of the const type argument <typeparamref name="K"/>.
            The original value is returned.
            </summary>
            <typeparam name="K">
            The const type argument containing the value to set as the third parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareExchangeK_Int32`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeK_Int32`2">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeK_Int32`2"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-int32@-system-int32-system-int32)">
            Interlocked.CompareExchange(ref int, int, int)</see> that is an atomic operation that compares the value of the first parameter
            to the value of the const type argument <typeparamref name="KCompare"/>.
            If equal, the first parameter's value is replaced with the value of the const type argument <typeparamref name="KExchange"/>.
            The original value is returned.
            </summary>
            <typeparam name="KCompare">
            The const type argument containing the value to compare with the third parameter.
            </typeparam>
            <typeparam name="KExchange">
            The const type argument containing the value to exchange with the first parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeK_Int32`2.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeUInt32">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeUInt32"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-uint32@-system-uint32-system-uint32)">
            Interlocked.CompareExchange(ref uint, uint, uint)</see> that is an atomic operation that compares the value of the first parameter
            with the third,
            and if equal, replaces the first parameter's value with the second .
            The first parameter's original value is returned.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareExchangeUInt32.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeUInt32`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeUInt32`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-uint32@-system-uint32-system-uint32)">
            Interlocked.CompareExchange(ref uint, uint, uint)</see> that is an atomic operation that compares the value of the first parameter
            to the value of the const type argument <typeparamref name="K"/>.
            If equal, the first parameter's value is replaced with the value of the second as an atomic operation.
            The original value is returned.
            </summary>
            <typeparam name="K">
            The const type argument containing the value to compare with the third parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeUInt32`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeK_UInt32`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeK_UInt32`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-uint32@-system-uint32-system-uint32)">
            Interlocked.CompareExchange(ref uint, uint, uint)</see> that is an atomic operation that compares the value of the first parameter
            with the second.
            If equal, the first parameter's value is replaced with the value of the const type argument <typeparamref name="K"/>.
            The original value is returned.
            </summary>
            <typeparam name="K">
            The const type argument containing the value to set as the third parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareExchangeK_UInt32`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeK_UInt32`2">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeK_UInt32`2"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-uint32@-system-uint32-system-uint32)">
            Interlocked.CompareExchange(ref uint, uint, uint)</see> that is an atomic operation that compares the value of the first parameter
            to the value of the const type argument <typeparamref name="KCompare"/>.
            If equal, the first parameter's value is replaced with the value of the const type argument <typeparamref name="KExchange"/>.
            The original value is returned.
            </summary>
            <typeparam name="KCompare">
            The const type argument containing the value to compare with the third parameter.
            </typeparam>
            <typeparam name="KExchange">
            The const type argument containing the value to exchange with the first parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeK_UInt32`2.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeInt64">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeInt64"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-int64@-system-int64-system-int64)">
            Interlocked.CompareExchange(ref long, long, long)</see> that is an atomic operation that compares the value of the first parameter
            with the third,
            and if equal, replaces the first parameter's value with the second .
            The first parameter's original value is returned.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareExchangeInt64.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeInt64`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeInt64`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-int64@-system-int64-system-int64)">
            Interlocked.CompareExchange(ref long, long, long)</see> that is an atomic operation that compares the value of the first parameter
            to the value of the const type argument <typeparamref name="K"/>.
            If equal, the first parameter's value is replaced with the value of the second as an atomic operation.
            The original value is returned.
            </summary>
            <typeparam name="K">
            The const type argument containing the value to compare with the third parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeInt64`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeK_Int64`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeK_Int64`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-int64@-system-int64-system-int64)">
            Interlocked.CompareExchange(ref long, long, long)</see> that is an atomic operation that compares the value of the first parameter
            with the second.
            If equal, the first parameter's value is replaced with the value of the const type argument <typeparamref name="K"/>.
            The original value is returned.
            </summary>
            <typeparam name="K">
            The const type argument containing the value to set as the third parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareExchangeK_Int64`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeK_Int64`2">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeK_Int64`2"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-int64@-system-int64-system-int64)">
            Interlocked.CompareExchange(ref long, long, long)</see> that is an atomic operation that compares the value of the first parameter
            to the value of the const type argument <typeparamref name="KCompare"/>.
            If equal, the first parameter's value is replaced with the value of the const type argument <typeparamref name="KExchange"/>.
            The original value is returned.
            </summary>
            <typeparam name="KCompare">
            The const type argument containing the value to compare with the third parameter.
            </typeparam>
            <typeparam name="KExchange">
            The const type argument containing the value to exchange with the first parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeK_Int64`2.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeUInt64">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeUInt64"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-uint64@-system-uint64-system-uint64)">
            Interlocked.CompareExchange(ref ulong, ulong, ulong)</see> that is an atomic operation that compares the value of the first parameter
            with the third,
            and if equal, replaces the first parameter's value with the second .
            The first parameter's original value is returned.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareExchangeUInt64.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeUInt64`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeUInt64`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-uint64@-system-uint64-system-uint64)">
            Interlocked.CompareExchange(ref ulong, ulong, ulong)</see> that is an atomic operation that compares the value of the first parameter
            to the value of the const type argument <typeparamref name="K"/>.
            If equal, the first parameter's value is replaced with the value of the second as an atomic operation.
            The original value is returned.
            </summary>
            <typeparam name="K">
            The const type argument containing the value to compare with the third parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeUInt64`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeK_UInt64`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeK_UInt64`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-uint64@-system-uint64-system-uint64)">
            Interlocked.CompareExchange(ref ulong, ulong, ulong)</see> that is an atomic operation that compares the value of the first parameter
            with the second.
            If equal, the first parameter's value is replaced with the value of the const type argument <typeparamref name="K"/>.
            The original value is returned.
            </summary>
            <typeparam name="K">
            The const type argument containing the value to set as the third parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareExchangeK_UInt64`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeK_UInt64`2">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeK_UInt64`2"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-uint64@-system-uint64-system-uint64)">
            Interlocked.CompareExchange(ref ulong, ulong, ulong)</see> that is an atomic operation that compares the value of the first parameter
            to the value of the const type argument <typeparamref name="KCompare"/>.
            If equal, the first parameter's value is replaced with the value of the const type argument <typeparamref name="KExchange"/>.
            The original value is returned.
            </summary>
            <typeparam name="KCompare">
            The const type argument containing the value to compare with the third parameter.
            </typeparam>
            <typeparam name="KExchange">
            The const type argument containing the value to exchange with the first parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeK_UInt64`2.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeSingle">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeSingle"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-single@-system-single-system-single)">
            Interlocked.CompareExchange(ref float, float, float)</see> that is an atomic operation that compares the value of the first parameter
            with the third,
            and if equal, replaces the first parameter's value with the second .
            The first parameter's original value is returned.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareExchangeSingle.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeSingle`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeSingle`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-single@-system-single-system-single)">
            Interlocked.CompareExchange(ref float, float, float)</see> that is an atomic operation that compares the value of the first parameter
            to the value of the const type argument <typeparamref name="K"/>.
            If equal, the first parameter's value is replaced with the value of the second as an atomic operation.
            The original value is returned.
            </summary>
            <typeparam name="K">
            The const type argument containing the value to compare with the third parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeSingle`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeK_Single`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeK_Single`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-single@-system-single-system-single)">
            Interlocked.CompareExchange(ref float, float, float)</see> that is an atomic operation that compares the value of the first parameter
            with the second.
            If equal, the first parameter's value is replaced with the value of the const type argument <typeparamref name="K"/>.
            The original value is returned.
            </summary>
            <typeparam name="K">
            The const type argument containing the value to set as the third parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareExchangeK_Single`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeK_Single`2">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeK_Single`2"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-single@-system-single-system-single)">
            Interlocked.CompareExchange(ref float, float, float)</see> that is an atomic operation that compares the value of the first parameter
            to the value of the const type argument <typeparamref name="KCompare"/>.
            If equal, the first parameter's value is replaced with the value of the const type argument <typeparamref name="KExchange"/>.
            The original value is returned.
            </summary>
            <typeparam name="KCompare">
            The const type argument containing the value to compare with the third parameter.
            </typeparam>
            <typeparam name="KExchange">
            The const type argument containing the value to exchange with the first parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeK_Single`2.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeDouble">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeDouble"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-double@-system-double-system-double)">
            Interlocked.CompareExchange(ref double, double, double)</see> that is an atomic operation that compares the value of the first parameter
            with the third,
            and if equal, replaces the first parameter's value with the second .
            The first parameter's original value is returned.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareExchangeDouble.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeDouble`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeDouble`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-double@-system-double-system-double)">
            Interlocked.CompareExchange(ref double, double, double)</see> that is an atomic operation that compares the value of the first parameter
            to the value of the const type argument <typeparamref name="K"/>.
            If equal, the first parameter's value is replaced with the value of the second as an atomic operation.
            The original value is returned.
            </summary>
            <typeparam name="K">
            The const type argument containing the value to compare with the third parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeDouble`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeK_Double`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeK_Double`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-double@-system-double-system-double)">
            Interlocked.CompareExchange(ref double, double, double)</see> that is an atomic operation that compares the value of the first parameter
            with the second.
            If equal, the first parameter's value is replaced with the value of the const type argument <typeparamref name="K"/>.
            The original value is returned.
            </summary>
            <typeparam name="K">
            The const type argument containing the value to set as the third parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareExchangeK_Double`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeK_Double`2">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeK_Double`2"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-double@-system-double-system-double)">
            Interlocked.CompareExchange(ref double, double, double)</see> that is an atomic operation that compares the value of the first parameter
            to the value of the const type argument <typeparamref name="KCompare"/>.
            If equal, the first parameter's value is replaced with the value of the const type argument <typeparamref name="KExchange"/>.
            The original value is returned.
            </summary>
            <typeparam name="KCompare">
            The const type argument containing the value to compare with the third parameter.
            </typeparam>
            <typeparam name="KExchange">
            The const type argument containing the value to exchange with the first parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeK_Double`2.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeIntPtr">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeIntPtr"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-intptr@-system-intptr-system-intptr)">
            Interlocked.CompareExchange(ref nint, nint, nint)</see> which compares the first parameter with the third,
            and if equal, replaces the first parameter with the second as an atomic operation.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareExchangeIntPtr.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeIntPtr`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeIntPtr`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-intptr@-system-intptr-system-intptr)">
            Interlocked.CompareExchange(ref nint, nint, nint)</see> that is an atomic operation that compares the value of the first parameter
            to the value of the const type argument <typeparamref name="K"/>.
            If equal, the first parameter's value is replaced with the value of the second as an atomic operation.
            The original value is returned.
            </summary>
            <typeparam name="K">
            The const type argument containing the value to compare with the third parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeIntPtr`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeK_IntPtr`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeK_IntPtr`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-intptr@-system-intptr-system-intptr)">
            Interlocked.CompareExchange(ref nint, nint, nint)</see> that is an atomic operation that compares the value of the first parameter
            with the second.
            If equal, the first parameter's value is replaced with the value of the const type argument <typeparamref name="K"/>.
            The original value is returned.
            </summary>
            <typeparam name="K">
            The const type argument containing the value to set as the third parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareExchangeK_IntPtr`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeK_IntPtr`2">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeK_IntPtr`2"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-intptr@-system-intptr-system-intptr)">
            Interlocked.CompareExchange(ref nint, nint, nint)</see> that is an atomic operation that compares the value of the first parameter
            to the value of the const type argument <typeparamref name="KCompare"/>.
            If equal, the first parameter's value is replaced with the value of the const type argument <typeparamref name="KExchange"/>.
            The original value is returned.
            </summary>
            <typeparam name="KCompare">
            The const type argument containing the value to compare with the third parameter.
            </typeparam>
            <typeparam name="KExchange">
            The const type argument containing the value to exchange with the first parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeK_IntPtr`2.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeUIntPtr">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeUIntPtr"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-uintptr@-system-uintptr-system-uintptr)">
            Interlocked.CompareExchange(ref nuint, nuint, nuint)</see> that is an atomic operation that compares the value of the first parameter
            with the third,
            and if equal, replaces the first parameter's value with the second .
            The first parameter's original value is returned.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareExchangeUIntPtr.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeUIntPtr`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeUIntPtr`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-uintptr@-system-uintptr-system-uintptr)">
            Interlocked.CompareExchange(ref nuint, nuint, nuint)</see> that is an atomic operation that compares the value of the first parameter
            to the value of the const type argument <typeparamref name="K"/>.
            If equal, the first parameter's value is replaced with the value of the second as an atomic operation.
            The original value is returned.
            </summary>
            <typeparam name="K">
            The const type argument containing the value to compare with the third parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeUIntPtr`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeK_UIntPtr`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeK_UIntPtr`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-uintptr@-system-uintptr-system-uintptr)">
            Interlocked.CompareExchange(ref nuint, nuint, nuint)</see> that is an atomic operation that compares the value of the first parameter
            with the second.
            If equal, the first parameter's value is replaced with the value of the const type argument <typeparamref name="K"/>.
            The original value is returned.
            </summary>
            <typeparam name="K">
            The const type argument containing the value to set as the third parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareExchangeK_UIntPtr`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeK_UIntPtr`2">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeK_UIntPtr`2"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-uintptr@-system-uintptr-system-uintptr)">
            Interlocked.CompareExchange(ref nuint, nuint, nuint)</see> that is an atomic operation that compares the value of the first parameter
            to the value of the const type argument <typeparamref name="KCompare"/>.
            If equal, the first parameter's value is replaced with the value of the const type argument <typeparamref name="KExchange"/>.
            The original value is returned.
            </summary>
            <typeparam name="KCompare">
            The const type argument containing the value to compare with the third parameter.
            </typeparam>
            <typeparam name="KExchange">
            The const type argument containing the value to exchange with the first parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeK_UIntPtr`2.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeObject">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeObject"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-object@-system-object-system-object)">
            Interlocked.CompareExchange(ref object, object, object)</see> that is an atomic operation that compares the value of the first parameter
            with the third,
            and if equal, replaces the first parameter's value with the second .
            The first parameter's original value is returned.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareExchangeObject.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeObject`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeObject`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-object@-system-object-system-object)">
            Interlocked.CompareExchange(ref object, object, object)</see> that is an atomic operation that compares the value of the first parameter
            to the value of the const type argument <typeparamref name="K"/>.
            If equal, the first parameter's value is replaced with the value of the second as an atomic operation.
            The original value is returned.
            </summary>
            <typeparam name="K">
            The const type argument containing the value to compare with the third parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeObject`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeK_Object`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeK_Object`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-object@-system-object-system-object)">
            Interlocked.CompareExchange(ref object, object, object)</see> that is an atomic operation that compares the value of the first parameter
            with the second.
            If equal, the first parameter's value is replaced with the value of the const type argument <typeparamref name="K"/>.
            The original value is returned.
            </summary>
            <typeparam name="K">
            The const type argument containing the value to set as the third parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareExchangeK_Object`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeK_Object`2">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeK_Object`2"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-object@-system-object-system-object)">
            Interlocked.CompareExchange(ref object, object, object)</see> that is an atomic operation that compares the value of the first parameter
            to the value of the const type argument <typeparamref name="KCompare"/>.
            If equal, the first parameter's value is replaced with the value of the const type argument <typeparamref name="KExchange"/>.
            The original value is returned.
            </summary>
            <typeparam name="KCompare">
            The const type argument containing the value to compare with the third parameter.
            </typeparam>
            <typeparam name="KExchange">
            The const type argument containing the value to exchange with the first parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeK_Object`2.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeT`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeT`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(-0@-0-0)">
            Interlocked.CompareExchange(ref T, T, T)</see> that is an atomic operation that compares the value of the first parameter
            with the third,
            and if equal, replaces the first parameter's value with the second .
            The first parameter's original value is returned.
            </summary>
            <typeparam name="T">
            The type of the value to be compared and exchanged.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareExchangeT`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeT`2">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeT`2"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(-0@-0-0)">
            Interlocked.CompareExchange(ref T, T, T)</see> that is an atomic operation that compares the value of the first parameter
            to the value of the const type argument <typeparamref name="K"/>.
            If equal, the first parameter's value is replaced with the value of the second as an atomic operation.
            The original value is returned.
            </summary>
            <typeparam name="T">
            The type of the value to be compared and exchanged.
            </typeparam>
            <typeparam name="K">
            The const type argument containing the value to compare with the third parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeT`2.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeK_T`2">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeK_T`2"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(-0@-0-0)">
            Interlocked.CompareExchange(ref T, T, T)</see> that is an atomic operation that compares the value of the first parameter
            with the second.
            If equal, the first parameter's value is replaced with the value of the const type argument <typeparamref name="K"/>.
            The original value is returned.
            </summary>
            <typeparam name="T">
            The type of the value to be compared and exchanged.
            </typeparam>
            <typeparam name="K">
            The const type argument containing the value to set as the third parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareExchangeK_T`2.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeK_T`3">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeK_T`3"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(-0@-0-0)">
            Interlocked.CompareExchange(ref T, T, T)</see> that is an atomic operation that compares the value of the first parameter
            to the value of the const type argument <typeparamref name="KCompare"/>.
            If equal, the first parameter's value is replaced with the value of the const type argument <typeparamref name="KExchange"/>.
            The original value is returned.
            </summary>
            <typeparam name="T">
            The type of the value to be compared and exchanged.
            </typeparam>
            <typeparam name="KCompare">
            The const type argument containing the value to compare with the third parameter.
            </typeparam>
            <typeparam name="KExchange">
            The const type argument containing the value to exchange with the first parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeK_T`3.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.DecrementInt32">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.DecrementInt32"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.increment#system-threading-interlocked-increment(system-int32@)">
            Interlocked.Decrement(ref int)</see> which decrements the value of the first parameter as an atomic operation.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.DecrementInt32.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.DecrementUInt32">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.DecrementUInt32"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.increment#system-threading-interlocked-increment(system-uint32@)">
            Interlocked.Decrement(ref uint)</see> which decrements the value of the first parameter as an atomic operation.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.DecrementUInt32.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.DecrementInt64">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.DecrementInt64"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.increment#system-threading-interlocked-increment(system-int64@)">
            Interlocked.Decrement(ref long)</see> which decrements the value of the first parameter as an atomic operation.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.DecrementInt64.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.DecrementUInt64">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.DecrementUInt64"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.increment#system-threading-interlocked-increment(system-uint64@)">
            Interlocked.Decrement(ref ulong)</see> which decrements the value of the first parameter as an atomic operation.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.DecrementUInt64.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange#system-threading-interlocked-exchange(system-int32@-system-int32)">
            Interlocked.Exchange(ref int, int)</see> which sets the value of the first parameter to the
            value of the second and returns the original value as an atomic operation.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32`1"/>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange">
            System.Threading.Interlocked.Exchange</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`2"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange#system-threading-interlocked-exchange(system-int32@-system-int32)">
            Interlocked.Exchange(ref int, int)</see> which sets the value of the first parameter to the
            the value of the const type argument <typeparamref name="K"/> and
            returns the original value as an atomic operation.
            </summary>
            <typeparam name="K">
            The const type argument containing the new value.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32"/>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange">
            System.Threading.Interlocked.Exchange</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`2"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange#system-threading-interlocked-exchange(system-uint32@-system-uint32)">
            Interlocked.Exchange(ref uint, uint)</see> which sets the value of the first parameter to the
            value of the second and returns the original value as an atomic operation.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32`1"/>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange#system-threading-interlocked-exchange(system-uint32@)">
            System.Threading.Interlocked.Exchange</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`2"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange#system-threading-interlocked-exchange(system-int32@-system-int32)">
            Interlocked.Exchange(ref int, int)</see> which sets the value of the first parameter to the
            the value of the const type argument <typeparamref name="K"/> and
            returns the original value as an atomic operation.
            </summary>
            <typeparam name="K">
            The const type argument containing the new value.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32"/>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange">
            System.Threading.Interlocked.Exchange</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`2"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange#system-threading-interlocked-exchange(system-int64@-system-uint64)">
            Interlocked.Exchange(ref long, long)</see> which sets the value of the first parameter to the
            value of the second and returns the original value as an atomic operation.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64`1"/>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange">
            System.Threading.Interlocked.Exchange</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`2"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange#system-threading-interlocked-exchange(system-int64@-system-uint64)">
            Interlocked.Exchange(ref long, long)</see> which sets the value of the first parameter to the
            the value of the const type argument <typeparamref name="K"/> and
            returns the original value as an atomic operation.
            </summary>
            <typeparam name="K">
            The const type argument containing the new value.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64"/>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange">
            System.Threading.Interlocked.Exchange</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`2"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange#system-threading-interlocked-exchange(system-uint64@-system-uint64)">
            Interlocked.Exchange(ref ulong, ulong)</see> which sets the value of the first parameter to the
            value of the second and returns the original value as an atomic operation.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64`1"/>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange#system-threading-interlocked-exchange">
            System.Threading.Interlocked.Exchange</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`2"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange#system-threading-interlocked-exchange(system-int64@-system-uint64)">
            Interlocked.Exchange(ref long, long)</see> which sets the value of the first parameter to the
            the value of the const type argument <typeparamref name="K"/> and
            returns the original value as an atomic operation.
            </summary>
            <typeparam name="K">
            The const type argument containing the new value.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64"/>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange">
            System.Threading.Interlocked.Exchange</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`2"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange#system-threading-interlocked-exchange(system-single@-system-single)">
            Interlocked.Exchange(ref float, float)</see> which sets the value of the first parameter to the
            value of the second and returns the original value as an atomic operation.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle`1"/>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange">
            System.Threading.Interlocked.Exchange</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`2"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange#system-threading-interlocked-exchange(system-single@-system-single)">
            Interlocked.Exchange(ref float, float)</see> which sets the value of the first parameter to the
            the value of the const type argument <typeparamref name="K"/> and
            returns the original value as an atomic operation.
            </summary>
            <typeparam name="K">
            The const type argument containing the new value.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle"/>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange">
            System.Threading.Interlocked.Exchange</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`2"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange#system-threading-interlocked-exchange(system-double@-system-double)">
            Interlocked.Exchange(ref double, double)</see> which sets the value of the first parameter to the
            value of the second and returns the original value as an atomic operation.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble`1"/>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange">
            System.Threading.Interlocked.Exchange</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`2"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange#system-threading-interlocked-exchange(system-double@-system-double)">
            Interlocked.Exchange(ref double, double)</see> which sets the value of the first parameter to the
            the value of the const type argument <typeparamref name="K"/> and
            returns the original value as an atomic operation.
            </summary>
            <typeparam name="K">
            The const type argument containing the new value.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble"/>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange">
            System.Threading.Interlocked.Exchange</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`2"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange#system-threading-interlocked-exchange(system-intptr@-system-intptr)">
            Interlocked.Exchange(ref nint, nint)</see> which sets the value of the first parameter to the
            value of the second and returns the original value as an atomic operation.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr"/>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange">
            System.Threading.Interlocked.Exchange</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`2"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange#system-threading-interlocked-exchange(system-intptr@-system-intptr)">
            Interlocked.Exchange(ref nint, nint)</see> which sets the value of the first parameter to the
            the value of the const type argument <typeparamref name="K"/> and
            returns the original value as an atomic operation.
            </summary>
            <typeparam name="K">
            The const type argument containing the new value.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr"/>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange">
            System.Threading.Interlocked.Exchange</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`2"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange#system-threading-interlocked-exchange(system-uintptr@-system-uintptr)">
            Interlocked.Exchange(ref nuint, nuint)</see> which sets the value of the first parameter to the
            value of the second and returns the original value as an atomic operation.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr`1"/>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange#system-threading-interlocked-exchange">
            System.Threading.Interlocked.Exchange</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`2"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see cref="T:ConstTypeArgs.Delegates.Funcs.RefFunction`2"/> which sets the value of the first parameter to the
            the value of the const type argument <typeparamref name="K"/> and
            returns the original value as an atomic operation.
            </summary>
            <typeparam name="K">
            The const type argument containing the new value.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr"/>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange">
            System.Threading.Interlocked.Exchange</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`2"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange#system-threading-interlocked-exchange(system-object@-system-object)">
            Interlocked.Exchange(ref object, object)</see> which sets the value of the first parameter to the
            value of the second and returns the original value as an atomic operation.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.ExchangeObject.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject`1"/>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange">
            System.Threading.Interlocked.Exchange</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`2"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange#system-threading-interlocked-exchange(system-object@-system-object)">
            Interlocked.Exchange(ref object, object)</see> which sets the value of the first parameter to the
            the value of the const type argument <typeparamref name="K"/> and
            returns the original value as an atomic operation.
            </summary>
            <typeparam name="K">
            The const type argument containing the new value.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.ExchangeObject`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject"/>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange">
            System.Threading.Interlocked.Exchange</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`2"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange#system-threading-interlocked-exchange(-0@-0)">
            Interlocked.Exchange(ref T, T)</see> which sets the value of the first parameter to the
            value of the second and returns the original value as an atomic operation.
            </summary>
            <typeparam name="T">
            The type of the value to be exchanged.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.ExchangeT`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`2"/>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange">
            System.Threading.Interlocked.Exchange</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject`1"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`2">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange#system-threading-interlocked-exchange(-0@-0)">
            Interlocked.Exchange(ref T, T)</see> which sets the value of the first parameter to the
            the value of the const type argument <typeparamref name="K"/> and
            returns the original value as an atomic operation.
            </summary>
            <typeparam name="T">
            The type of the value to be exchanged.
            </typeparam>
            <typeparam name="K">
            The const type argument containing the new value.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.ExchangeT`2.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`1"/>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange">
            System.Threading.Interlocked.Exchange</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject`1"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.IncrementInt32">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.IncrementInt32"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.increment#system-threading-interlocked-increment(system-int32@)">
            Interlocked.Increment(ref int)</see> which increments the value of the first parameter as an atomic operation.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.IncrementInt32.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.IncrementUInt32">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.IncrementUInt32"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.increment#system-threading-interlocked-increment(system-uint32@)">
            Interlocked.Increment(ref uint)</see> which increments the value of the first parameter as an atomic operation.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.IncrementUInt32.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.IncrementInt64">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.IncrementInt64"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.increment#system-threading-interlocked-increment(system-int64@)">
            Interlocked.Increment(ref long)</see> which increments the value of the first parameter as an atomic operation.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.IncrementInt64.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.IncrementUInt64">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.IncrementUInt64"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.increment#system-threading-interlocked-increment(system-uint64@)">
            Interlocked.Increment(ref ulong)</see> which increments the value of the first parameter as an atomic operation.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.IncrementUInt64.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.OrInt32">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.OrInt32"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.or#system-threading-interlocked-or(system-int32@-system-int32)">
            Interlocked.Or(ref int, int)</see> which is an atomic operation that performs a bitwise OR operation on the value of the first parameter
            with the second and returns the original value.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.OrInt32.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.OrInt32`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.OrInt32`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.or#system-threading-interlocked-or(system-int32@-system-int32)">
            Interlocked.Or(ref int, int)</see> which is an atomic operation that performs a bitwise OR operation on the value of the first parameter
            with the value of the const type argument <typeparamref name="K"/> and
            returns the original value.
            </summary>
            <typeparam name="K">
            The const type argument containing the second value for the OR operation.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.OrInt32`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.OrUInt32">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.OrUInt32"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.or#system-threading-interlocked-or(system-uint32@-system-uint32)">
            Interlocked.Or(ref uint, uint)</see> which is an atomic operation that performs a bitwise OR operation on the value of the first parameter
            with the second and returns the original value.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.OrUInt32.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.OrUInt32`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.OrUInt32`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.or#system-threading-interlocked-or(system-uint32@-system-uint32)">
            Interlocked.Or(ref uint, uint)</see> which is an atomic operation that performs a bitwise OR operation on the value of the first parameter
            with the value of the const type argument <typeparamref name="K"/> and
            returns the original value.
            </summary>
            <typeparam name="K">
            The const type argument containing the second value for the OR operation.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.OrUInt32`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.OrInt64">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.OrInt64"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.and#system-threading-interlocked-or(system-int64@-system-int64)">
            Interlocked.Or(ref long, long)</see> which is an atomic operation that performs a bitwise OR operation on the value of the first parameter
            with the second and returns the original value.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.OrInt64.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.OrInt64`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.OrInt64`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.and#system-threading-interlocked-or(system-int64@-system-int64)">
            Interlocked.Or(ref long, long)</see> which is an atomic operation that performs a bitwise OR operation on the value of the first parameter
            with the value of the const type argument <typeparamref name="K"/> and
            returns the original value.
            </summary>
            <typeparam name="K">
            The const type argument containing the second value for the OR operation.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.OrInt64`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.OrUInt64">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.OrUInt64"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.and#system-threading-interlocked-or(system-uint64@-system-uint64)">
            Interlocked.And(ref ulong, ulong)</see> which is an atomic operation that performs a bitwise OR operation on the value of the first parameter
            with the second and returns the original value.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.OrUInt64.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.OrUInt64`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.OrUInt64`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.and#system-threading-interlocked-or(system-uint64@-system-uint64)">
            Interlocked.And(ref ulong, ulong)</see> which is an atomic operation that performs a bitwise OR operation on the value of the first parameter
            with the value of the const type argument <typeparamref name="K"/> and
            returns the original value.
            </summary>
            <typeparam name="K">
            The const type argument containing the second value for the OR operation.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.OrUInt64`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Logical.AND`2">
            | A     | B     | A AND B |
            |-------|-------|---------|
            | false | false | false   |
            | false | true  | false   |
            | true  | false | false   |
            | true  | true  | true    |
            *
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Logical.AND`2"/> const type argument provides a predicate that
            performs a logical AND operation on the
            <see href="https://learn.microsoft.com/dotnet/api/system.predicate-1">Predicate&lt;T&gt;</see>
            const type argument <typeparamref name="KPred"/> and the given input of the type <typeparamref name="T"/>,
            and provides the static method <see cref="M:ConstTypeArgs.Delegates.Logical.AND`2.Eval``1"/> evaluating
            against a given const type argument of type <see cref="T:ConstTypeArgs.IConstTypeArg`1"/>.
            </summary>
            <typeparam name="T">
            The input's type.
            </typeparam>
            <typeparam name="KPred">
            The predicate const type argument to evaluate.
            </typeparam>
            <remarks>
             <para>
             The following table shows the result of the AND operation for all possible inputs:
               <list type="table"><listheader>
                 <term><c>A</c></term>           <term><c>B</c></term>     <term><c>A AND B</c></term></listheader>
                 <item><term><c>false</c></term> <term><c>false</c></term> <term><c>false</c></term></item>
                 <item><term><c>false</c></term> <term><c>true</c></term>  <term><c>false</c></term></item>
                 <item><term><c>true</c></term>  <term><c>false</c></term> <term><c>false</c></term></item>
                 <item><term><c>true</c></term>  <term><c>true</c></term>  <term><c>true</c></term></item>
               </list>
             </para>
            </remarks>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.AND`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.OR`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.XOR`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.NAND`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.NOR`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.XNOR`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.IMPLY`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.NIMPLY`3"/>
        </member>
        <member name="M:ConstTypeArgs.Delegates.Logical.AND`2.Eval``1">
            <summary>
            Performs a bitwise AND operation evaluating <typeparamref name="KPred"/> with
            the value of the given const type argument <typeparamref name="K"/>.
            </summary>
            <typeparam name="K">
            The const type argument to evaluate.
            </typeparam>
            <returns>
            The <see cref="T:System.Boolean"/> value of the logical AND operation.
            </returns>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Logical.AND`3">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Logical.AND`3"/> const type argument provides a predicate that
            performs a logical AND operation on the
            <see href="https://learn.microsoft.com/dotnet/api/system.predicate-1">Predicate&lt;T&gt;</see>
            const type arguments <typeparamref name="KPred1"/> and <typeparamref name="KPred2"/> given input
            of the type <typeparamref name="T"/>
            and provides the static method <see cref="M:ConstTypeArgs.Delegates.Logical.AND`3.Eval``1"/> to evaluate
            against a given const type argument of type <see cref="T:ConstTypeArgs.IConstTypeArg`1"/>.
            </summary>
            <typeparam name="T">
            The input's type.
            </typeparam>
            <typeparam name="KPred1">
            The 1st predicate const type argument to evaluate.
            </typeparam>
            <typeparam name="KPred2">
            The 2nd predicate const type argument to evaluate.
            </typeparam>
            <remarks>
            <see cref="P:ConstTypeArgs.Delegates.Logical.AND`3.Value"/> returns <see langword="true"/> only if both <typeparamref name="KPred1"/>
            &amp; <typeparamref name="KPred2"/> evaluate to <see langword="true"/>.
             <para>
             The following table shows the result of the AND operation for all possible inputs:
               <list type="table"><listheader>
                 <term><c>A</c></term>           <term><c>B</c></term>     <term><c>A AND B</c></term></listheader>
                 <item><term><c>false</c></term> <term><c>false</c></term> <term><c>false</c></term></item>
                 <item><term><c>false</c></term> <term><c>true</c></term>  <term><c>false</c></term></item>
                 <item><term><c>true</c></term>  <term><c>false</c></term> <term><c>false</c></term></item>
                 <item><term><c>true</c></term>  <term><c>true</c></term>  <term><c>true</c></term></item>
               </list>
             </para>
            </remarks>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.AND`2"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.OR`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.XOR`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.NAND`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.NOR`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.XNOR`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.IMPLY`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.NIMPLY`3"/>
        </member>
        <member name="M:ConstTypeArgs.Delegates.Logical.AND`3.Eval``1">
            <summary>
            Performs a bitwise AND operation evaluating
            <typeparamref name="KPred1"/> &amp; <typeparamref name="KPred2"/>
            with the value of the given const type argument <typeparamref name="K"/>.
            </summary>
            <typeparam name="K">
            The const type argument to evaluate.
            </typeparam>
            <returns>
            The <see cref="T:System.Boolean"/> value of the logical AND operation.
            </returns>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Logical.NAND`2">
            | A     | B     | A NAND B |
            |-------|-------|----------|
            | false | false | true     |
            | false | true  | true     |
            | true  | false | true     |
            | true  | true  | false    |
            *
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Logical.NAND`2"/> const type argument provides a predicate that
            performs a logical NAND operation on the
            <see href="https://learn.microsoft.com/dotnet/api/system.predicate-1">Predicate&lt;T&gt;</see>
            const type argument <typeparamref name="KPred"/> and the given input of the type <typeparamref name="T"/>,
            and provides the static method <see cref="M:ConstTypeArgs.Delegates.Logical.NAND`2.Eval``1"/> evaluating
            against a given const type argument of type <see cref="T:ConstTypeArgs.IConstTypeArg`1"/>.
            </summary>
            <typeparam name="T">
            The input's type.
            </typeparam>
            <typeparam name="KPred">
            The predicate const type argument to evaluate.
            </typeparam>
            <remarks>
             <para>
             The following table shows the result of the NAND operation for all possible inputs:
               <list type="table"><listheader>
                 <term><c>A</c></term>           <term><c>B</c></term>     <term><c>A NAND B</c></term></listheader>
                 <item><term><c>false</c></term> <term><c>false</c></term> <term><c>true</c></term></item>
                 <item><term><c>false</c></term> <term><c>true</c></term>  <term><c>true</c></term></item>
                 <item><term><c>true</c></term>  <term><c>false</c></term> <term><c>true</c></term></item>
                 <item><term><c>true</c></term>  <term><c>true</c></term>  <term><c>false</c></term></item>
               </list>
             </para>
            </remarks>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.AND`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.OR`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.XOR`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.NAND`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.NOR`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.XNOR`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.IMPLY`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.NIMPLY`3"/>
        </member>
        <member name="M:ConstTypeArgs.Delegates.Logical.NAND`2.Eval``1">
            <summary>
            Performs a bitwise AND operation evaluating <typeparamref name="KPred"/> with
            the value of the given const type argument <typeparamref name="K"/>.
            </summary>
            <typeparam name="K">
            The const type argument to evaluate.
            </typeparam>
            <returns>
            The <see cref="T:System.Boolean"/> value of the logical AND operation.
            </returns>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Logical.NAND`3">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Logical.NAND`3"/> const type argument provides a predicate that
            performs a logical AND operation on the
            <see href="https://learn.microsoft.com/dotnet/api/system.predicate-1">Predicate&lt;T&gt;</see>
            const type arguments <typeparamref name="KPred1"/> and <typeparamref name="KPred2"/> given input
            of the type <typeparamref name="T"/>
            and provides the static method <see cref="M:ConstTypeArgs.Delegates.Logical.NAND`3.Eval``1"/> to evaluate
            against a given const type argument of type <see cref="T:ConstTypeArgs.IConstTypeArg`1"/>.
            </summary>
            <typeparam name="T">
            The input's type.
            </typeparam>
            <typeparam name="KPred1">
            The 1st predicate const type argument to evaluate.
            </typeparam>
            <typeparam name="KPred2">
            The 2nd predicate const type argument to evaluate.
            </typeparam>
            <remarks>
            <see cref="P:ConstTypeArgs.Delegates.Logical.NAND`3.Value"/> returns <see langword="true"/> only if at least one of the const type arguments
            <typeparamref name="KPred1"/> &amp; <typeparamref name="KPred2"/> evaluates to <see langword="false"/>.
             <para>
             The following table shows the result of the NAND operation for all possible inputs:
               <list type="table"><listheader>
                 <term><c>A</c></term>           <term><c>B</c></term>     <term><c>A NAND B</c></term></listheader>
                 <item><term><c>false</c></term> <term><c>false</c></term> <term><c>true</c></term></item>
                 <item><term><c>false</c></term> <term><c>true</c></term>  <term><c>true</c></term></item>
                 <item><term><c>true</c></term>  <term><c>false</c></term> <term><c>true</c></term></item>
                 <item><term><c>true</c></term>  <term><c>true</c></term>  <term><c>false</c></term></item>
               </list>
             </para>
            </remarks>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.AND`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.OR`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.XOR`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.NOR`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.XNOR`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.IMPLY`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.NIMPLY`3"/>
        </member>
        <member name="M:ConstTypeArgs.Delegates.Logical.NAND`3.Eval``1">
            <summary>
            Performs a bitwise NAND operation evaluating
            <typeparamref name="KPred1"/> &amp; <typeparamref name="KPred2"/>
            with the value of the given const type argument <typeparamref name="K"/>.
            </summary>
            <typeparam name="K">
            The const type argument to evaluate.
            </typeparam>
            <returns>
            The <see cref="T:System.Boolean"/> value of the logical NAND operation.
            </returns>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Logical.OR`3">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Logical.OR`3"/> const type argument provides a predicate that
            performs a logical OR operation on the
            <see href="https://learn.microsoft.com/dotnet/api/system.predicate-1">Predicate&lt;T&gt;</see>
            const type arguments <typeparamref name="KPred1"/> and <typeparamref name="KPred2"/> given input
            of the type <typeparamref name="T"/>
            and provides the static method <see cref="M:ConstTypeArgs.Delegates.Logical.OR`3.Eval``1"/> to evaluate
            against a given const type argument of type <see cref="T:ConstTypeArgs.IConstTypeArg`1"/>.
            </summary>
            <typeparam name="T">
            The input's type.
            </typeparam>
            <typeparam name="KPred1">
            The 1st predicate const type argument to evaluate.
            </typeparam>
            <typeparam name="KPred2">
            The 2nd predicate const type argument to evaluate.
            </typeparam>
            <remarks>
            <see cref="P:ConstTypeArgs.Delegates.Logical.OR`3.Value"/> returns <see langword="true"/> only if at least one of const type arguments
            <typeparamref name="KPred1"/> &amp; <typeparamref name="KPred2"/> evaluates to <see langword="true"/>.
             <para>
             The following table shows the result of the OR operation for all possible inputs:
               <list type="table"><listheader>
                 <term><c>A</c></term>           <term><c>B</c></term>     <term><c>A OR B</c></term></listheader>
                 <item><term><c>false</c></term> <term><c>false</c></term> <term><c>false</c></term></item>
                 <item><term><c>false</c></term> <term><c>true</c></term>  <term><c>true</c></term></item>
                 <item><term><c>true</c></term>  <term><c>false</c></term> <term><c>true</c></term></item>
                 <item><term><c>true</c></term>  <term><c>true</c></term>  <term><c>true</c></term></item>
               </list>
             </para>
            </remarks>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.AND`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.XOR`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.NAND`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.NOR`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.XNOR`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.IMPLY`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.NIMPLY`3"/>
        </member>
        <member name="M:ConstTypeArgs.Delegates.Logical.OR`3.Eval``1">
            <summary>
            Performs a bitwise OR operation evaluating
            <typeparamref name="KPred1"/> &amp; <typeparamref name="KPred2"/>
            with the value of the given const type argument <typeparamref name="K"/>.
            </summary>
            <typeparam name="K">
            The const type argument to evaluate.
            </typeparam>
            <returns>
            The <see cref="T:System.Boolean"/> value of the logical OR operation.
            </returns>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Logical.XOR`3">
            | A     | B     | A XOR B |
            |-------|-------|---------|
            | false | false | false   |
            | false | true  | true    |
            | true  | false | true    |
            | true  | true  | false   |
            *
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Logical.XOR`3"/> const type argument provides a predicate that
            performs a logical XOR operation on the
            <see href="https://learn.microsoft.com/dotnet/api/system.predicate-1">Predicate&lt;T&gt;</see>
            const type arguments <typeparamref name="KPred1"/> and <typeparamref name="KPred2"/> given input
            of the type <typeparamref name="T"/>
            and provides the static method <see cref="M:ConstTypeArgs.Delegates.Logical.XOR`3.Eval``1"/> to evaluate
            against a given const type argument of type <see cref="T:ConstTypeArgs.IConstTypeArg`1"/>.
            </summary>
            <typeparam name="T">
            The input's type.
            </typeparam>
            <typeparam name="KPred1">
            The 1st predicate const type argument to evaluate.
            </typeparam>
            <typeparam name="KPred2">
            The 2nd predicate const type argument to evaluate.
            </typeparam>
            <remarks>
            <see cref="P:ConstTypeArgs.Delegates.Logical.XOR`3.Value"/> returns <see langword="true"/> only if <em>EXACTLY ONE</em> of the const type arguments
            <typeparamref name="KPred1"/> &amp; <typeparamref name="KPred2"/> evaluates to <see langword="true"/>.
             <para>
             The following table shows the result of the XOR operation for all possible inputs:
               <list type="table"><listheader>
                 <term><c>A</c></term>           <term><c>B</c></term>     <term><c>A XOR B</c></term></listheader>
                 <item><term><c>false</c></term> <term><c>false</c></term> <term><c>false</c></term></item>
                 <item><term><c>false</c></term> <term><c>true</c></term>  <term><c>true</c></term></item>
                 <item><term><c>true</c></term>  <term><c>false</c></term> <term><c>true</c></term></item>
                 <item><term><c>true</c></term>  <term><c>true</c></term>  <term><c>false</c></term></item>
               </list>
             </para>
            </remarks>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.AND`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.OR`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.NAND`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.NOR`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.XNOR`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.IMPLY`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.NIMPLY`3"/>
        </member>
        <member name="M:ConstTypeArgs.Delegates.Logical.XOR`3.Eval``1">
            <summary>
            Performs a bitwise XOR operation evaluating
            <typeparamref name="KPred1"/> &amp; <typeparamref name="KPred2"/>
            with the value of the given const type argument <typeparamref name="K"/>.
            </summary>
            <typeparam name="K">
            The const type argument to evaluate.
            </typeparam>
            <returns>
            The <see cref="T:System.Boolean"/> value of the logical XOR operation.
            </returns>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Logical.NOR`3">
            | A     | B     | A NOR B |
            |-------|-------|---------|
            | false | false | true    |
            | false | true  | false   |
            | true  | false | false   |
            | true  | true  | false   |
            *
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Logical.NOR`3"/> const type argument provides a predicate that
            performs a logical NOR  operation on the
            <see href="https://learn.microsoft.com/dotnet/api/system.predicate-1">Predicate&lt;T&gt;</see>
            const type arguments <typeparamref name="KPred1"/> and <typeparamref name="KPred2"/> given input
            of the type <typeparamref name="T"/>
            and provides the static method <see cref="M:ConstTypeArgs.Delegates.Logical.NOR`3.Eval``1"/> to evaluate
            against a given const type argument of type <see cref="T:ConstTypeArgs.IConstTypeArg`1"/>.
            </summary>
            <typeparam name="T">
            The input's type.
            </typeparam>
            <typeparam name="KPred1">
            The 1st predicate const type argument to evaluate.
            </typeparam>
            <typeparam name="KPred2">
            The 2nd predicate const type argument to evaluate.
            </typeparam>
            <remarks>
            <see cref="P:ConstTypeArgs.Delegates.Logical.NOR`3.Value"/> returns <see langword="true"/> only if <em>BOTH</em> of the const type arguments
            <typeparamref name="KPred1"/> &amp; <typeparamref name="KPred2"/> evaluate to <see langword="false"/>.
             <para>
             The following table shows the result of the NOR operation for all possible inputs:
               <list type="table"><listheader>
                 <term><c>A</c></term>           <term><c>B</c></term>     <term><c>A NOR B</c></term></listheader>
                 <item><term><c>false</c></term> <term><c>false</c></term> <term><c>true</c></term></item>
                 <item><term><c>false</c></term> <term><c>true</c></term>  <term><c>false</c></term></item>
                 <item><term><c>true</c></term>  <term><c>false</c></term> <term><c>false</c></term></item>
                 <item><term><c>true</c></term>  <term><c>true</c></term>  <term><c>false</c></term></item>
               </list>
             </para>
            </remarks>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.AND`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.OR`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.XOR`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.NAND`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.XNOR`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.IMPLY`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.NIMPLY`3"/>
        </member>
        <member name="M:ConstTypeArgs.Delegates.Logical.NOR`3.Eval``1">
            <summary>
            Performs a bitwise NOR operation evaluating
            <typeparamref name="KPred1"/> &amp; <typeparamref name="KPred2"/>
            with the value of the given const type argument <typeparamref name="K"/>.
            </summary>
            <typeparam name="K">
            The const type argument to evaluate.
            </typeparam>
            <returns>
            The <see cref="T:System.Boolean"/> value of the logical NOR operation.
            </returns>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Logical.XNOR`3">
            | A     | B     | A XNOR B |
            |-------|-------|----------|
            | false | false | true     |
            | false | true  | false    |
            | true  | false | false    |
            | true  | true  | true     |
            *
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Logical.XNOR`3"/> const type argument provides a predicate that
            performs a logical XNOR  operation on the
            <see href="https://learn.microsoft.com/dotnet/api/system.predicate-1">Predicate&lt;T&gt;</see>
            const type arguments <typeparamref name="KPred1"/> and <typeparamref name="KPred2"/> given input
            of the type <typeparamref name="T"/>
            and provides the static method <see cref="M:ConstTypeArgs.Delegates.Logical.XNOR`3.Eval``1"/> to evaluate
            against a given const type argument of type <see cref="T:ConstTypeArgs.IConstTypeArg`1"/>.
            </summary>
            <typeparam name="T">
            The input's type.
            </typeparam>
            <typeparam name="KPred1">
            The 1st predicate const type argument to evaluate.
            </typeparam>
            <typeparam name="KPred2">
            The 2nd predicate const type argument to evaluate.
            </typeparam>
            <remarks>
            <see cref="P:ConstTypeArgs.Delegates.Logical.XNOR`3.Value"/> returns <see langword="true"/> only if <em>BOTH</em> of the const type arguments
            <typeparamref name="KPred1"/> &amp; <typeparamref name="KPred2"/> return the same value.
             <para>
             The following table shows the result of the XNOR operation for all possible inputs:
               <list type="table"><listheader>
                 <term><c>A</c></term>           <term><c>B</c></term>     <term><c>A XNOR B</c></term></listheader>
                 <item><term><c>false</c></term> <term><c>false</c></term> <term><c>true</c></term></item>
                 <item><term><c>false</c></term> <term><c>true</c></term>  <term><c>false</c></term></item>
                 <item><term><c>true</c></term>  <term><c>false</c></term> <term><c>false</c></term></item>
                 <item><term><c>true</c></term>  <term><c>true</c></term>  <term><c>true</c></term></item>
               </list>
             </para>
            </remarks>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.AND`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.OR`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.XOR`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.NAND`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.NOR`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.IMPLY`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.NIMPLY`3"/>
        </member>
        <member name="M:ConstTypeArgs.Delegates.Logical.XNOR`3.Eval``1">
            <summary>
            Performs a bitwise XNOR operation evaluating
            <typeparamref name="KPred1"/> &amp; <typeparamref name="KPred2"/>
            with the value of the given const type argument <typeparamref name="K"/>.
            </summary>
            <typeparam name="K">
            The const type argument to evaluate.
            </typeparam>
            <returns>
            The <see cref="T:System.Boolean"/> value of the logical XNOR operation.
            </returns>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Logical.IMPLY`3">
            | A     | B     | A IMPLY B |
            |-------|-------|-----------|
            | false | false | true      |
            | false | true  | true      |
            | true  | false | false     |
            | true  | true  | true      |
            *
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Logical.IMPLY`3"/> const type argument provides a predicate that
            performs a logical IMPLY  operation on the
            <see href="https://learn.microsoft.com/dotnet/api/system.predicate-1">Predicate&lt;T&gt;</see>
            const type arguments <typeparamref name="KPred1"/> and <typeparamref name="KPred2"/> given input
            of the type <typeparamref name="T"/>
            and provides the static method <see cref="M:ConstTypeArgs.Delegates.Logical.IMPLY`3.Eval``1"/> to evaluate
            against a given const type argument of type <see cref="T:ConstTypeArgs.IConstTypeArg`1"/>. IMPLY is also
            known as "material implication" or "material conditional".
            </summary>
            <typeparam name="T">
            The input's type.
            </typeparam>
            <typeparam name="KPred1">
            The 1st predicate const type argument to evaluate.
            </typeparam>
            <typeparam name="KPred2">
            The 2nd predicate const type argument to evaluate.
            </typeparam>
            <remarks>
            <see cref="P:ConstTypeArgs.Delegates.Logical.IMPLY`3.Value"/> returns <see langword="true"/> only if a true premise (<typeparamref name="KPred1"/>)
            does not lead to a false conclusion (<typeparamref name="KPred2"/>).
            <typeparamref name="KPred1"/> &amp; <typeparamref name="KPred2"/> return the same value.
             <para>
             The following table shows the result of the IMPLY operation for all possible inputs:
               <list type="table"><listheader>
                 <term><c>A</c></term>           <term><c>B</c></term>     <term><c>A IMPLY B</c></term></listheader>
                 <item><term><c>false</c></term> <term><c>false</c></term> <term><c>true</c></term></item>
                 <item><term><c>false</c></term> <term><c>true</c></term>  <term><c>true</c></term></item>
                 <item><term><c>true</c></term>  <term><c>false</c></term> <term><c>false</c></term></item>
                 <item><term><c>true</c></term>  <term><c>true</c></term>  <term><c>true</c></term></item>
               </list>
             </para>
            </remarks>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.AND`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.OR`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.XOR`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.NAND`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.NOR`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.NIMPLY`3"/>
        </member>
        <member name="M:ConstTypeArgs.Delegates.Logical.IMPLY`3.Eval``1">
            <summary>
            Performs a bitwise IMPLY operation evaluating
            <typeparamref name="KPred1"/> &amp; <typeparamref name="KPred2"/>
            with the value of the given const type argument <typeparamref name="K"/>.
            </summary>
            <typeparam name="K">
            The const type argument to evaluate.
            </typeparam>
            <returns>
            The <see cref="T:System.Boolean"/> value of the logical IMPLY operation.
            </returns>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Logical.NIMPLY`3">
            | A     | B     | A NIMPLY B |
            |-------|-------|------------|
            | false | false | false      |
            | false | true  | false      |
            | true  | false | true       |
            | true  | true  | false      |
            *
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Logical.NIMPLY`3"/> const type argument provides a predicate that
            performs a logical NIMPLY  operation on the
            <see href="https://learn.microsoft.com/dotnet/api/system.predicate-1">Predicate&lt;T&gt;</see>
            const type arguments <typeparamref name="KPred1"/> and <typeparamref name="KPred2"/> given input
            of the type <typeparamref name="T"/>
            and provides the static method <see cref="M:ConstTypeArgs.Delegates.Logical.NIMPLY`3.Eval``1"/> to evaluate
            against a given const type argument of type <see cref="T:ConstTypeArgs.IConstTypeArg`1"/>. NIMPLY is also
            known as "non-implication" or "antecedent".
            </summary>
            <typeparam name="T">
            The input's type.
            </typeparam>
            <typeparam name="KPred1">
            The 1st predicate const type argument to evaluate.
            </typeparam>
            <typeparam name="KPred2">
            The 2nd predicate const type argument to evaluate.
            </typeparam>
            <remarks>
            <see cref="P:ConstTypeArgs.Delegates.Logical.NIMPLY`3.Value"/> returns <see langword="true"/> only if a true premise (<typeparamref name="KPred1"/>)
            leads to a false conclusion (<typeparamref name="KPred2"/>).
             <para>
             The following table shows the result of the IMPLY operation for all possible inputs:
               <list type="table"><listheader>
                 <term><c>A</c></term>           <term><c>B</c></term>     <term><c>A NIMPLY B</c></term></listheader>
                 <item><term><c>false</c></term> <term><c>false</c></term> <term><c>false</c></term></item>
                 <item><term><c>false</c></term> <term><c>true</c></term>  <term><c>false</c></term></item>
                 <item><term><c>true</c></term>  <term><c>false</c></term> <term><c>true</c></term></item>
                 <item><term><c>true</c></term>  <term><c>true</c></term>  <term><c>false</c></term></item>
               </list>
             </para>
            </remarks>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.AND`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.OR`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.XOR`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.NAND`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.NOR`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.IMPLY`3"/>
        </member>
        <member name="M:ConstTypeArgs.Delegates.Logical.NIMPLY`3.Eval``1">
            <summary>
            Performs a bitwise NIMPLY operation evaluating
            <typeparamref name="KPred1"/> &amp; <typeparamref name="KPred2"/>
            with the value of the given const type argument <typeparamref name="K"/>.
            </summary>
            <typeparam name="K">
            The const type argument to evaluate.
            </typeparam>
            <returns>
            The <see cref="T:System.Boolean"/> value of the logical NIMPLY operation.
            </returns>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Predicates.K_Predicate`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Predicates.K_Predicate`1"/> interface  provides a more explicit
            <c>IConstTypeArg&lt;Predicate&lt;T&gt;&gt;</c> derived type.
            </summary>
            <typeparam name="T">
            The type of the input parameter of the predicate.
            </typeparam>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.predicate-1">
            System.Predicate&lt;T&gt;</seealso>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Predicates.K_PredicateArray`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Predicates.K_PredicateArray`1"/> interface provides a more explicit
            <c>IConstTypeArg&lt;Predicate&lt;T&gt;[]&gt;</c> type.
            </summary>
            <typeparam name="T">
            The type of the predicate's input.
            </typeparam>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.predicate">
            System.Predicate</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Predicates.K_Predicate`1"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Predicates.Predicate`2">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Predicates.Predicate`2"/> class provides an argument provider that
            wraps the
            <see href="https://learn.microsoft.com/dotnet/api/system.predicate">
            System.Predicate</see> value from another argument provider.
            </summary>
            <typeparam name="T">
            The type of the predicate's input.
            </typeparam>
            <typeparam name="KPred">
            The type of argument provider containing the value to wrap.
            </typeparam>
            <remarks>
            This class can be useful when creating domain-specific argument providers,
            such as default values, when an argument provider's value needs to be
            wrapped for use in a different context.
            </remarks>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Predicates.PredicateArray`2">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Predicates.PredicateArray`2"/> class provides an argument provider that
            wraps the
            <see href="https://learn.microsoft.com/dotnet/api/system.predicate">
            System.Predicate</see> array from another argument provider.
            </summary>
            <typeparam name="T">
            The type of the predicate's input.
            </typeparam>
            <typeparam name="KPred">
            The type of argument provider containing the array to wrap.
            </typeparam>
            <remarks>
            This class can be useful when creating domain-specific argument providers,
            such as default values, when an argument provider's value needs to be
            wrapped for use in a different context.
            </remarks>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Predicates.AlwaysTrue`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Predicates.AlwaysTrue`1"/> readonly struct provides a const type argument equal to
            a predicate which always returns <see langword="true"/>.
            </summary>
            <typeparam name="T">
            The type of the input value.
            </typeparam>
            <seealso cref="T:ConstTypeArgs.Delegates.Predicates.AlwaysFalse`1"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Predicates.AlwaysFalse`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Predicates.AlwaysFalse`1"/> readonly struct provides a const type argument equal to
            a predicate which always returns <see langword="false"/>.
            </summary>
            <typeparam name="T">
            The type of the input value.
            </typeparam>
            <seealso cref="T:ConstTypeArgs.Delegates.Predicates.AlwaysTrue`1"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Predicates.IsNotNull`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Predicates.IsNotNull`1"/> readonly struct provides a const type argument equal to
            a predicate that checks if the input value is not <see langword="null"/>.
            </summary>
            <typeparam name="T">
            The type of the input value.
            </typeparam>
            <seealso cref="T:ConstTypeArgs.Delegates.Predicates.IsNull`1"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Predicates.IsNull`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Predicates.IsNull`1"/> readonly struct provides a const type argument equal to
            a predicate that checks if the input value is <see langword="null"/>.
            </summary>
            <typeparam name="T">
            The type of the input value.
            </typeparam>
            <seealso cref="T:ConstTypeArgs.Delegates.Predicates.IsNotNull`1"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Predicates.Not`2">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Predicates.Not`2"/> const type argument provides a predicate that is
            that negates the result of another the
            <see href="https://learn.microsoft.com/dotnet/api/system.predicate-1">Predicate&lt;T&gt;</see>
            const type argument <typeparamref name="KPred"/>.
            </summary>
            <typeparam name="T">
            The input's type.
            </typeparam>
            <typeparam name="KPred">
            The predicate const type argument to negate.
            </typeparam>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.AND`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.OR`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.XOR`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.NAND`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.NOR`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.XNOR`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.IMPLY`3"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Logical.NIMPLY`3"/>
        </member>
    </members>
</doc>

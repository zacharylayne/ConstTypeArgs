<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
    <GenerateDocumentationFile>True</GenerateDocumentationFile>
    <DocumentationFile>ConstTypeArgs.Chars.xml</DocumentationFile>
    <PackageIcon>Char.png</PackageIcon>
    <PackageReadmeFile>README.MD</PackageReadmeFile>
    <Company>Entry Point Software</Company>
    <Authors>Zachary Layne</Authors>
    <Title>Const Type Arguments - Chars</Title>
    <Copyright>Copyright (c) 2024 Zachary Layne</Copyright>
    <RepositoryUrl>https://github.com/zacharylayne/ConstTypeArgs</RepositoryUrl>
    <PackageTags>constants; const-type-args; generics; static-abstract-interface-members; char</PackageTags>
    <PackageReleaseNotes>Initial release.</PackageReleaseNotes>
    <PackageLicenseFile>LICENSE.txt</PackageLicenseFile>
    <IncludeSymbols>True</IncludeSymbols>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
    <GenerateDocumentationFile>True</GenerateDocumentationFile>
    <DocumentationFile>ConstTypeArgs.Chars.xml</DocumentationFile>
    <Description>Builds on type of the ConstTypeArgs.Core library to provide const type arguments that allow you to use type parameters to pass byte values to generics at compile-time. This provides an analog to type specialization in C++.

Here's a simple demonstration:

 ```csharp

 using ConstTypeArgs.Chars;

public static class Foo&lt;TChar&gt;
    where TChar: K_Char
{
    private static readonly char Separator = TChar.Value;

    public static void Output(string[] items)
    {
        foreach (var item in items)
            Console.Write($"{item}{Separator}");
    }
}

// Elsewhere
var helloWorld = new string[] { "Hello", "World!" };

Foo&lt;Comma&gt;.Output(helloWorld); // Output: Hello,World!
Foo&lt;Slash&gt;.Output(helloWorld); // Output: Hello/World!
Foo&lt;Semicolon&gt;.Output(helloWorld); // Output: Hello;World!
Foo&lt;VerticalBar&gt;.Output(helloWorld); // Output: Hello|World!
```</Description>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <Optimize>False</Optimize>
    <IsTrimmable>True</IsTrimmable>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
    <IsTrimmable>True</IsTrimmable>
  </PropertyGroup>

  <ItemGroup>
    <None Include="..\..\Icons\Char.png">
      <Pack>True</Pack>
      <PackagePath>\</PackagePath>
    </None>
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="ConstTypeArgs.Core" Version="1.0.0" />
  </ItemGroup>

  <ItemGroup>
    <None Update="LICENSE.txt">
      <Pack>True</Pack>
      <PackagePath>\</PackagePath>
    </None>
    <None Update="README.MD">
      <Pack>True</Pack>
      <PackagePath>\</PackagePath>
    </None>
  </ItemGroup>
</Project>

<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ConstTypeArgs.Int128s</name>
    </assembly>
    <members>
        <member name="T:ConstTypeArgs.Int128s.K_Int128">
            <summary>
            The <see cref="T:ConstTypeArgs.Int128s.K_Int128"/> interface provides a more explicit
            <c>IConstTypeArg&lt;Int128&gt;</c> derived type.
            </summary>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.int128">
            Int128</seealso>
            <seealso cref="T:ConstTypeArgs.Int128s.Int128`1"/>
            <seealso cref="T:ConstTypeArgs.Int128s.K_Int128Array"/>
        </member>
        <member name="T:ConstTypeArgs.Int128s.K_Int128`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Int128s.K_Int128`1"/> interface provides a more explicit
            <c>IConstTypeArg&lt;Int128, K_Int128&lt;TSelf&gt;&gt;</c> derived type.
            </summary>
            <typeparam name="TSelf">
            The implementing type.
            </typeparam>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.int128">
            Int128</seealso>
            <seealso cref="T:ConstTypeArgs.Int128s.Int128`1"/>
            <seealso cref="T:ConstTypeArgs.Int128s.K_Int128Array`1"/>
        </member>
        <member name="T:ConstTypeArgs.Int128s.K_Int128Array">
            <summary>
            The <see cref="T:ConstTypeArgs.Int128s.K_Int128Array"/> interface provides a more explicit
            <c>IConstTypeArg&lt;Int128[]&gt;</c> type.
            </summary>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.int128">
            Int128</seealso>
            <seealso cref="T:ConstTypeArgs.Int128s.Int128Array`1"/>
            <seealso cref="T:ConstTypeArgs.Int128s.K_Int128"/>
        </member>
        <member name="T:ConstTypeArgs.Int128s.K_Int128Array`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Int128s.K_Int128Array`1"/> interface provides a more explicit
            <c>IConstTypeArg&lt;Int128[], K_Int128Array&lt;TSelf&gt;&gt;</c> derived type.
            </summary>
            <typeparam name="TSelf">
            The implementing type.
            </typeparam>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.int128">
            Int128</seealso>
            <seealso cref="T:ConstTypeArgs.Int128s.Int128Array`1"/>
            <seealso cref="T:ConstTypeArgs.Int128s.K_Int128`1"/>
        </member>
        <member name="T:ConstTypeArgs.Int128s.Int128`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Int128s.Int128`1"/> class provides a const argument provider that
            wraps the <see href="https://learn.microsoft.com/dotnet/api/system.Int128">
            System.Int128</see> value from another const argument provider.
            </summary>
            <typeparam name="K">
            The const argument provider type containing the value to wrap.
            </typeparam>
            <remarks>
            This class can be useful when creating domain-specific const argument providers,
            such as default values, when a const argument provider's value needs to be
            wrapped for use in a different context.
            </remarks>
            <seealso cref="T:ConstTypeArgs.Int128s.K_Int128"/>
            <seealso cref="T:ConstTypeArgs.Int128s.K_Int128`1"/>
            <seealso cref="T:ConstTypeArgs.Int128s.Int128Array`1"/>
        </member>
        <member name="T:ConstTypeArgs.Int128s.Int128Array`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Int128s.Int128Array`1"/> class provides a const argument provider that
            wraps the <see href="https://learn.microsoft.com/dotnet/api/system.Int128">
            System.Int128</see> array from another const argument provider.
            </summary>
            <typeparam name="K">
            The const argument provider type containing the array to wrap.
            </typeparam>
            <remarks>
            This class can be useful when creating domain-specific const argument providers,
            such as default values, when a const argument provider's value needs to be
            wrapped for use in a different context.
            </remarks>
            <seealso cref="T:ConstTypeArgs.Int128s.K_Int128"/>
            <seealso cref="T:ConstTypeArgs.Int128s.Int128`1"/>
        </member>
        <member name="T:ConstTypeArgs.Int128s.Default">
            <summary>
            The <see cref="T:ConstTypeArgs.Int128s.Default"/> struct provides a const type argument equal to the
            <see langword="default"/> of
            <see href="https://docs.microsoft.com/dotnet/api/system.int128">
            Int128</see> (<c>0</c>).
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Int128s.MinValue">
            <summary>
            The <see cref="T:ConstTypeArgs.Int128s.MinValue"/> struct provides a const type argument equal to
            <see href="https://docs.microsoft.com/dotnet/api/system.int128.minvalue">
            Int128.MinValue</see>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Int128s.MaxValue">
            <summary>
            The <see cref="T:ConstTypeArgs.Int128s.MaxValue"/> struct provides a const type argument equal to
            <see href="https://docs.microsoft.com/dotnet/api/system.int128.maxvalue">
            Int128.MaxValue</see>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Int128s.MaxDigits">
            <summary>
            The <see cref="T:ConstTypeArgs.Int128s.MaxDigits"/> readonly struct provides a const type argument equal to
            the maximum number of digits in an
            <see href="https://docs.microsoft.com/dotnet/api/system.Int128">
            Int128</see> (<c>39</c>).
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Int128s.MaxHexDigits">
            <summary>
            The <see cref="T:ConstTypeArgs.Int128s.MaxHexDigits"/> readonly struct provides a const type argument equal to
            the maximum number of hex digits in an
            <see href="https://docs.microsoft.com/dotnet/api/system.numerics.Int128">
            Int128</see>(<c>32</c>).
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Int128s._0">
            <summary>
            The <see cref="T:ConstTypeArgs.Int128s._0"/> readonly struct provides a const type argument equal to
            <c>0</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Int128s.Neg_1">
            <summary>
            The <see cref="T:ConstTypeArgs.Int128s.Neg_1"/> readonly struct provides a const type argument equal to
            <c>-1</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Int128s.Neg_2">
            <summary>
            The <see cref="T:ConstTypeArgs.Int128s.Neg_2"/> readonly struct provides a const type argument equal to
            <c>-2</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Int128s.Neg_3">
            <summary>
            The <see cref="T:ConstTypeArgs.Int128s.Neg_3"/> readonly struct provides a const type argument equal to
            <c>-3</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Int128s.Neg_4">
            <summary>
            The <see cref="T:ConstTypeArgs.Int128s.Neg_4"/> readonly struct provides a const type argument equal to
            <c>-4</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Int128s.Neg_5">
            <summary>
            The <see cref="T:ConstTypeArgs.Int128s.Neg_5"/> readonly struct provides a const type argument equal to
            <c>-5</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Int128s.Neg_6">
            <summary>
            The <see cref="T:ConstTypeArgs.Int128s.Neg_6"/> readonly struct provides a const type argument equal to
            <c>-6</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Int128s.Neg_7">
            <summary>
            The <see cref="T:ConstTypeArgs.Int128s.Neg_7"/> readonly struct provides a const type argument equal to
            <c>-7</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Int128s.Neg_8">
            <summary>
            The <see cref="T:ConstTypeArgs.Int128s.Neg_8"/> readonly struct provides a const type argument equal to
            <c>-8</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Int128s.Neg_9">
            <summary>
            The <see cref="T:ConstTypeArgs.Int128s.Neg_9"/> readonly struct provides a const type argument equal to
            <c>-9</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Int128s.Neg_10">
            <summary>
            The <see cref="T:ConstTypeArgs.Int128s.Neg_10"/> readonly struct provides a const type argument equal to
            <c>-10</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Int128s.Neg_11">
            <summary>
            The <see cref="T:ConstTypeArgs.Int128s.Neg_11"/> readonly struct provides a const type argument equal to
            <c>-11</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Int128s.Neg_12">
            <summary>
            The <see cref="T:ConstTypeArgs.Int128s.Neg_12"/> readonly struct provides a const type argument equal to
            <c>-12</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Int128s.Neg_13">
            <summary>
            The <see cref="T:ConstTypeArgs.Int128s.Neg_13"/> readonly struct provides a const type argument equal to
            <c>-13</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Int128s.Neg_14">
            <summary>
            The <see cref="T:ConstTypeArgs.Int128s.Neg_14"/> readonly struct provides a const type argument equal to
            <c>-14</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Int128s.Neg_15">
            <summary>
            The <see cref="T:ConstTypeArgs.Int128s.Neg_15"/> readonly struct provides a const type argument equal to
            <c>-15</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Int128s._1">
            <summary>
            The <see cref="T:ConstTypeArgs.Int128s._1"/> readonly struct provides a const type argument equal to
            <c>1</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Int128s._2">
            <summary>
            The <see cref="T:ConstTypeArgs.Int128s._2"/> readonly struct provides a const type argument equal to
            <c>2</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Int128s._3">
            <summary>
            The <see cref="T:ConstTypeArgs.Int128s._3"/> readonly struct provides a const type argument equal to
            <c>3</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Int128s._4">
            <summary>
            The <see cref="T:ConstTypeArgs.Int128s._4"/> readonly struct provides a const type argument equal to
            <c>4</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Int128s._5">
            <summary>
            The <see cref="T:ConstTypeArgs.Int128s._5"/> readonly struct provides a const type argument equal to
            <c>5</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Int128s._6">
            <summary>
            The <see cref="T:ConstTypeArgs.Int128s._6"/> readonly struct provides a const type argument equal to
            <c>6</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Int128s._7">
            <summary>
            The <see cref="T:ConstTypeArgs.Int128s._7"/> readonly struct provides a const type argument equal to
            <c>7</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Int128s._8">
            <summary>
            The <see cref="T:ConstTypeArgs.Int128s._8"/> readonly struct provides a const type argument equal to
            <c>8</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Int128s._9">
            <summary>
            The <see cref="T:ConstTypeArgs.Int128s._9"/> readonly struct provides a const type argument equal to
            <c>9</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Int128s._10">
            <summary>
            The <see cref="T:ConstTypeArgs.Int128s._10"/> readonly struct provides a const type argument equal to
            <c>10</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Int128s._11">
            <summary>
            The <see cref="T:ConstTypeArgs.Int128s._11"/> readonly struct provides a const type argument equal to
            <c>11</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Int128s._12">
            <summary>
            The <see cref="T:ConstTypeArgs.Int128s._12"/> readonly struct provides a const type argument equal to
            <c>12</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Int128s._13">
            <summary>
            The <see cref="T:ConstTypeArgs.Int128s._13"/> readonly struct provides a const type argument equal to
            <c>13</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Int128s._14">
            <summary>
            The <see cref="T:ConstTypeArgs.Int128s._14"/> readonly struct provides a const type argument equal to
            <c>14</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Int128s._15">
            <summary>
            The <see cref="T:ConstTypeArgs.Int128s._15"/> readonly struct provides a const type argument equal to
            <c>15</c>.
            </summary>
        </member>
    </members>
</doc>

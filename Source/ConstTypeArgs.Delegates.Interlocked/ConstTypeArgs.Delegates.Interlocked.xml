<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ConstTypeArgs.Delegates.Interlocked</name>
    </assembly>
    <members>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.AddInt32">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.AddInt32"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.add#system-threading-interlocked-add(system-int32@-system-int32)">
            Interlocked.Add(ref int, int)</see> which is an atomic operation that adds the second parameter
            to the value of the first and returns the new value that was stored in the first parameter.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.AddInt32.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.AddK_Int32`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.AddK_Int32`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.add#system-threading-interlocked-add(system-int32@-system-int32)">
            Interlocked.Add(ref int, int)</see> which is an atomic operation that adds the value of the const type argument <typeparamref name="K"/>
            to the value of the first and returns the new value that was stored in the first parameter.
            </summary>
            <typeparam name="K">
            The const type argument containing the value to add to the first parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.AddK_Int32`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.AddUInt32">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.AddUInt32"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.add#system-threading-interlocked-add(system-uint32@-system-uint32)">
            Interlocked.Add(ref uint, uint)</see> which is an atomic operation that adds the second parameter
            to the value of the first and returns the new value that was stored in the first parameter.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.AddUInt32.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.AddK_UInt32`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.AddK_UInt32`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.add#system-threading-interlocked-add(system-uint32@-system-uint32)">
            Interlocked.Add(ref uint, uint)</see> which is an atomic operation that adds the value of the const type argument <typeparamref name="K"/>
            to the value of the first and returns the new value that was stored in the first parameter.
            </summary>
            <typeparam name="K">
            The const type argument containing the value to add to the first parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.AddK_UInt32`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.AddInt64">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.AddInt64"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.add#system-threading-interlocked-add(system-int64@-system-int64)">
            Interlocked.Add(ref long, long)</see> which is an atomic operation that adds the second parameter
            to the value of the first and returns the new value that was stored in the first parameter.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.AddInt64.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.AddK_Int64`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.AddK_Int64`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.add#system-threading-interlocked-add(system-int64@-system-int64)">
            Interlocked.Add(ref long, long)</see> which is an atomic operation that adds the value of the const type argument <typeparamref name="K"/>
            to the value of the first and returns the new value that was stored in the first parameter.
            </summary>
            <typeparam name="K">
            The const type argument containing the value to add to the first parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.AddK_Int64`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.AddUInt64">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.AddUInt64"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.add#system-threading-interlocked-add(system-uint64@-system-uint64)">
            Interlocked.Add(ref ulong, ulong)</see> which is an atomic operation that adds the second parameter
            to the value of the first and returns the new value that was stored in the first parameter.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.AddUInt64.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.AddK_UInt64`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.AddK_UInt64`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.add#system-threading-interlocked-add(system-uint64@-system-uint64)">
            Interlocked.Add(ref ulong, ulong)</see> which is an atomic operation that adds the value of the const type argument <typeparamref name="K"/>
            to the value of the first and returns the new value that was stored in the first parameter.
            </summary>
            <typeparam name="K">
            The const type argument containing the value to add to the first parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.AddK_UInt64`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.AndInt32">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.AndInt32"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.and#system-threading-interlocked-and(system-int32@-system-int32)">
            Interlocked.And(ref int, int)</see> which is an atomic operation that performs a bitwise AND operation on the value of the first parameter
            with the second and returns the original value.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.AndInt32.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.AndInt32`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.AndInt32`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.and#system-threading-interlocked-and(system-int32@-system-int32)">
            Interlocked.And(ref int, int)</see> which is an atomic operation that performs a bitwise AND operation on the value of the first parameter
            with the value of the const type argument <typeparamref name="K"/> and
            returns the original value.
            </summary>
            <typeparam name="K">
            The const type argument containing the second value for the AND operation.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.AndInt32`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.AndUInt32">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.AndUInt32"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.and#system-threading-interlocked-and(system-uint32@-system-uint32)">
            Interlocked.And(ref uint, uint)</see> which is an atomic operation that performs a bitwise AND operation on the value of the first parameter
            with the second and returns the original value.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.AndUInt32.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.AndUInt32`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.AndUInt32`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.and#system-threading-interlocked-and(system-uint32@-system-uint32)">
            Interlocked.And(ref uint, uint)</see> which is an atomic operation that performs a bitwise AND operation on the value of the first parameter
            with the value of the const type argument <typeparamref name="K"/> and
            returns the original value.
            </summary>
            <typeparam name="K">
            The const type argument containing the second value for the AND operation.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.AndUInt32`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.AndInt64">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.AndInt64"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.and#system-threading-interlocked-and(system-int64@-system-int64)">
            Interlocked.And(ref long, long)</see> which is an atomic operation that performs a bitwise AND operation on the value of the first parameter
            with the second and returns the original value.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.AndInt64.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.AndInt64`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.AndInt64`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.and#system-threading-interlocked-and(system-int64@-system-int64)">
            Interlocked.And(ref long, long)</see> which is an atomic operation that performs a bitwise AND operation on the value of the first parameter
            with the value of the const type argument <typeparamref name="K"/> and
            returns the original value.
            </summary>
            <typeparam name="K">
            The const type argument containing the second value for the AND operation.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.AndInt64`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.AndUInt64">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.AndUInt64"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.and#system-threading-interlocked-and(system-uint64@-system-uint64)">
            Interlocked.And(ref ulong, ulong)</see> which is an atomic operation that performs a bitwise AND operation on the value of the first parameter
            with the second and returns the original value.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.AndUInt64.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.AndUInt64`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.AndUInt64`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.and#system-threading-interlocked-and(system-uint64@-system-uint64)">
            Interlocked.And(ref ulong, ulong)</see> which is an atomic operation that performs a bitwise AND operation on the value of the first parameter
            with the value of the const type argument <typeparamref name="K"/> and
            returns the original value.
            </summary>
            <typeparam name="K">
            The const type argument containing the second value for the AND operation.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.AndUInt64`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeInt32">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeInt32"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-int32@-system-int32-system-int32)">
            Interlocked.CompareExchange(ref int, int, int)</see> that is an atomic operation that compares the value of the first parameter
            with the third,
            and if equal, replaces the first parameter's value with the second .
            The first parameter's original value is returned.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareExchangeInt32.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeInt32`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeInt32`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-int32@-system-int32-system-int32)">
            Interlocked.CompareExchange(ref int, int, int)</see> that is an atomic operation that compares the value of the first parameter
            to the value of the const type argument <typeparamref name="K"/>.
            If equal, the first parameter's value is replaced with the value of the second.
            The original value is returned.
            </summary>
            <typeparam name="K">
            The const type argument containing the value to compare with the third parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeInt32`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeK_Int32`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeK_Int32`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-int32@-system-int32-system-int32)">
            Interlocked.CompareExchange(ref int, int, int)</see> that is an atomic operation that compares the value of the first parameter
            with the second.
            If equal, the first parameter's value is replaced with the value of the const type argument <typeparamref name="K"/>.
            The original value is returned.
            </summary>
            <typeparam name="K">
            The const type argument containing the value to set as the third parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareExchangeK_Int32`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeK_Int32`2">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeK_Int32`2"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-int32@-system-int32-system-int32)">
            Interlocked.CompareExchange(ref int, int, int)</see> that is an atomic operation that compares the value of the first parameter
            to the value of the const type argument <typeparamref name="KCompare"/>.
            If equal, the first parameter's value is replaced with the value of the const type argument <typeparamref name="KExchange"/>.
            The original value is returned.
            </summary>
            <typeparam name="KCompare">
            The const type argument containing the value to compare with the third parameter.
            </typeparam>
            <typeparam name="KExchange">
            The const type argument containing the value to exchange with the first parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeK_Int32`2.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeUInt32">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeUInt32"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-uint32@-system-uint32-system-uint32)">
            Interlocked.CompareExchange(ref uint, uint, uint)</see> that is an atomic operation that compares the value of the first parameter
            with the third,
            and if equal, replaces the first parameter's value with the second .
            The first parameter's original value is returned.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareExchangeUInt32.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeUInt32`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeUInt32`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-uint32@-system-uint32-system-uint32)">
            Interlocked.CompareExchange(ref uint, uint, uint)</see> that is an atomic operation that compares the value of the first parameter
            to the value of the const type argument <typeparamref name="K"/>.
            If equal, the first parameter's value is replaced with the value of the second as an atomic operation.
            The original value is returned.
            </summary>
            <typeparam name="K">
            The const type argument containing the value to compare with the third parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeUInt32`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeK_UInt32`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeK_UInt32`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-uint32@-system-uint32-system-uint32)">
            Interlocked.CompareExchange(ref uint, uint, uint)</see> that is an atomic operation that compares the value of the first parameter
            with the second.
            If equal, the first parameter's value is replaced with the value of the const type argument <typeparamref name="K"/>.
            The original value is returned.
            </summary>
            <typeparam name="K">
            The const type argument containing the value to set as the third parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareExchangeK_UInt32`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeK_UInt32`2">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeK_UInt32`2"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-uint32@-system-uint32-system-uint32)">
            Interlocked.CompareExchange(ref uint, uint, uint)</see> that is an atomic operation that compares the value of the first parameter
            to the value of the const type argument <typeparamref name="KCompare"/>.
            If equal, the first parameter's value is replaced with the value of the const type argument <typeparamref name="KExchange"/>.
            The original value is returned.
            </summary>
            <typeparam name="KCompare">
            The const type argument containing the value to compare with the third parameter.
            </typeparam>
            <typeparam name="KExchange">
            The const type argument containing the value to exchange with the first parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeK_UInt32`2.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeInt64">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeInt64"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-int64@-system-int64-system-int64)">
            Interlocked.CompareExchange(ref long, long, long)</see> that is an atomic operation that compares the value of the first parameter
            with the third,
            and if equal, replaces the first parameter's value with the second .
            The first parameter's original value is returned.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareExchangeInt64.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeInt64`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeInt64`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-int64@-system-int64-system-int64)">
            Interlocked.CompareExchange(ref long, long, long)</see> that is an atomic operation that compares the value of the first parameter
            to the value of the const type argument <typeparamref name="K"/>.
            If equal, the first parameter's value is replaced with the value of the second as an atomic operation.
            The original value is returned.
            </summary>
            <typeparam name="K">
            The const type argument containing the value to compare with the third parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeInt64`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeK_Int64`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeK_Int64`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-int64@-system-int64-system-int64)">
            Interlocked.CompareExchange(ref long, long, long)</see> that is an atomic operation that compares the value of the first parameter
            with the second.
            If equal, the first parameter's value is replaced with the value of the const type argument <typeparamref name="K"/>.
            The original value is returned.
            </summary>
            <typeparam name="K">
            The const type argument containing the value to set as the third parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareExchangeK_Int64`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeK_Int64`2">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeK_Int64`2"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-int64@-system-int64-system-int64)">
            Interlocked.CompareExchange(ref long, long, long)</see> that is an atomic operation that compares the value of the first parameter
            to the value of the const type argument <typeparamref name="KCompare"/>.
            If equal, the first parameter's value is replaced with the value of the const type argument <typeparamref name="KExchange"/>.
            The original value is returned.
            </summary>
            <typeparam name="KCompare">
            The const type argument containing the value to compare with the third parameter.
            </typeparam>
            <typeparam name="KExchange">
            The const type argument containing the value to exchange with the first parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeK_Int64`2.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeUInt64">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeUInt64"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-uint64@-system-uint64-system-uint64)">
            Interlocked.CompareExchange(ref ulong, ulong, ulong)</see> that is an atomic operation that compares the value of the first parameter
            with the third,
            and if equal, replaces the first parameter's value with the second .
            The first parameter's original value is returned.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareExchangeUInt64.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeUInt64`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeUInt64`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-uint64@-system-uint64-system-uint64)">
            Interlocked.CompareExchange(ref ulong, ulong, ulong)</see> that is an atomic operation that compares the value of the first parameter
            to the value of the const type argument <typeparamref name="K"/>.
            If equal, the first parameter's value is replaced with the value of the second as an atomic operation.
            The original value is returned.
            </summary>
            <typeparam name="K">
            The const type argument containing the value to compare with the third parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeUInt64`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeK_UInt64`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeK_UInt64`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-uint64@-system-uint64-system-uint64)">
            Interlocked.CompareExchange(ref ulong, ulong, ulong)</see> that is an atomic operation that compares the value of the first parameter
            with the second.
            If equal, the first parameter's value is replaced with the value of the const type argument <typeparamref name="K"/>.
            The original value is returned.
            </summary>
            <typeparam name="K">
            The const type argument containing the value to set as the third parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareExchangeK_UInt64`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeK_UInt64`2">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeK_UInt64`2"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-uint64@-system-uint64-system-uint64)">
            Interlocked.CompareExchange(ref ulong, ulong, ulong)</see> that is an atomic operation that compares the value of the first parameter
            to the value of the const type argument <typeparamref name="KCompare"/>.
            If equal, the first parameter's value is replaced with the value of the const type argument <typeparamref name="KExchange"/>.
            The original value is returned.
            </summary>
            <typeparam name="KCompare">
            The const type argument containing the value to compare with the third parameter.
            </typeparam>
            <typeparam name="KExchange">
            The const type argument containing the value to exchange with the first parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeK_UInt64`2.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeSingle">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeSingle"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-single@-system-single-system-single)">
            Interlocked.CompareExchange(ref float, float, float)</see> that is an atomic operation that compares the value of the first parameter
            with the third,
            and if equal, replaces the first parameter's value with the second .
            The first parameter's original value is returned.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareExchangeSingle.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeSingle`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeSingle`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-single@-system-single-system-single)">
            Interlocked.CompareExchange(ref float, float, float)</see> that is an atomic operation that compares the value of the first parameter
            to the value of the const type argument <typeparamref name="K"/>.
            If equal, the first parameter's value is replaced with the value of the second as an atomic operation.
            The original value is returned.
            </summary>
            <typeparam name="K">
            The const type argument containing the value to compare with the third parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeSingle`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeK_Single`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeK_Single`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-single@-system-single-system-single)">
            Interlocked.CompareExchange(ref float, float, float)</see> that is an atomic operation that compares the value of the first parameter
            with the second.
            If equal, the first parameter's value is replaced with the value of the const type argument <typeparamref name="K"/>.
            The original value is returned.
            </summary>
            <typeparam name="K">
            The const type argument containing the value to set as the third parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareExchangeK_Single`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeK_Single`2">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeK_Single`2"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-single@-system-single-system-single)">
            Interlocked.CompareExchange(ref float, float, float)</see> that is an atomic operation that compares the value of the first parameter
            to the value of the const type argument <typeparamref name="KCompare"/>.
            If equal, the first parameter's value is replaced with the value of the const type argument <typeparamref name="KExchange"/>.
            The original value is returned.
            </summary>
            <typeparam name="KCompare">
            The const type argument containing the value to compare with the third parameter.
            </typeparam>
            <typeparam name="KExchange">
            The const type argument containing the value to exchange with the first parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeK_Single`2.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeDouble">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeDouble"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-double@-system-double-system-double)">
            Interlocked.CompareExchange(ref double, double, double)</see> that is an atomic operation that compares the value of the first parameter
            with the third,
            and if equal, replaces the first parameter's value with the second .
            The first parameter's original value is returned.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareExchangeDouble.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeDouble`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeDouble`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-double@-system-double-system-double)">
            Interlocked.CompareExchange(ref double, double, double)</see> that is an atomic operation that compares the value of the first parameter
            to the value of the const type argument <typeparamref name="K"/>.
            If equal, the first parameter's value is replaced with the value of the second as an atomic operation.
            The original value is returned.
            </summary>
            <typeparam name="K">
            The const type argument containing the value to compare with the third parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeDouble`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeK_Double`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeK_Double`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-double@-system-double-system-double)">
            Interlocked.CompareExchange(ref double, double, double)</see> that is an atomic operation that compares the value of the first parameter
            with the second.
            If equal, the first parameter's value is replaced with the value of the const type argument <typeparamref name="K"/>.
            The original value is returned.
            </summary>
            <typeparam name="K">
            The const type argument containing the value to set as the third parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareExchangeK_Double`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeK_Double`2">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeK_Double`2"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-double@-system-double-system-double)">
            Interlocked.CompareExchange(ref double, double, double)</see> that is an atomic operation that compares the value of the first parameter
            to the value of the const type argument <typeparamref name="KCompare"/>.
            If equal, the first parameter's value is replaced with the value of the const type argument <typeparamref name="KExchange"/>.
            The original value is returned.
            </summary>
            <typeparam name="KCompare">
            The const type argument containing the value to compare with the third parameter.
            </typeparam>
            <typeparam name="KExchange">
            The const type argument containing the value to exchange with the first parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeK_Double`2.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeIntPtr">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeIntPtr"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-intptr@-system-intptr-system-intptr)">
            Interlocked.CompareExchange(ref nint, nint, nint)</see> which compares the first parameter with the third,
            and if equal, replaces the first parameter with the second as an atomic operation.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareExchangeIntPtr.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeIntPtr`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeIntPtr`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-intptr@-system-intptr-system-intptr)">
            Interlocked.CompareExchange(ref nint, nint, nint)</see> that is an atomic operation that compares the value of the first parameter
            to the value of the const type argument <typeparamref name="K"/>.
            If equal, the first parameter's value is replaced with the value of the second as an atomic operation.
            The original value is returned.
            </summary>
            <typeparam name="K">
            The const type argument containing the value to compare with the third parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeIntPtr`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeK_IntPtr`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeK_IntPtr`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-intptr@-system-intptr-system-intptr)">
            Interlocked.CompareExchange(ref nint, nint, nint)</see> that is an atomic operation that compares the value of the first parameter
            with the second.
            If equal, the first parameter's value is replaced with the value of the const type argument <typeparamref name="K"/>.
            The original value is returned.
            </summary>
            <typeparam name="K">
            The const type argument containing the value to set as the third parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareExchangeK_IntPtr`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeK_IntPtr`2">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeK_IntPtr`2"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-intptr@-system-intptr-system-intptr)">
            Interlocked.CompareExchange(ref nint, nint, nint)</see> that is an atomic operation that compares the value of the first parameter
            to the value of the const type argument <typeparamref name="KCompare"/>.
            If equal, the first parameter's value is replaced with the value of the const type argument <typeparamref name="KExchange"/>.
            The original value is returned.
            </summary>
            <typeparam name="KCompare">
            The const type argument containing the value to compare with the third parameter.
            </typeparam>
            <typeparam name="KExchange">
            The const type argument containing the value to exchange with the first parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeK_IntPtr`2.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeUIntPtr">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeUIntPtr"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-uintptr@-system-uintptr-system-uintptr)">
            Interlocked.CompareExchange(ref nuint, nuint, nuint)</see> that is an atomic operation that compares the value of the first parameter
            with the third,
            and if equal, replaces the first parameter's value with the second .
            The first parameter's original value is returned.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareExchangeUIntPtr.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeUIntPtr`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeUIntPtr`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-uintptr@-system-uintptr-system-uintptr)">
            Interlocked.CompareExchange(ref nuint, nuint, nuint)</see> that is an atomic operation that compares the value of the first parameter
            to the value of the const type argument <typeparamref name="K"/>.
            If equal, the first parameter's value is replaced with the value of the second as an atomic operation.
            The original value is returned.
            </summary>
            <typeparam name="K">
            The const type argument containing the value to compare with the third parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeUIntPtr`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeK_UIntPtr`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeK_UIntPtr`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-uintptr@-system-uintptr-system-uintptr)">
            Interlocked.CompareExchange(ref nuint, nuint, nuint)</see> that is an atomic operation that compares the value of the first parameter
            with the second.
            If equal, the first parameter's value is replaced with the value of the const type argument <typeparamref name="K"/>.
            The original value is returned.
            </summary>
            <typeparam name="K">
            The const type argument containing the value to set as the third parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareExchangeK_UIntPtr`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeK_UIntPtr`2">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeK_UIntPtr`2"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-uintptr@-system-uintptr-system-uintptr)">
            Interlocked.CompareExchange(ref nuint, nuint, nuint)</see> that is an atomic operation that compares the value of the first parameter
            to the value of the const type argument <typeparamref name="KCompare"/>.
            If equal, the first parameter's value is replaced with the value of the const type argument <typeparamref name="KExchange"/>.
            The original value is returned.
            </summary>
            <typeparam name="KCompare">
            The const type argument containing the value to compare with the third parameter.
            </typeparam>
            <typeparam name="KExchange">
            The const type argument containing the value to exchange with the first parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeK_UIntPtr`2.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeObject">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeObject"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-object@-system-object-system-object)">
            Interlocked.CompareExchange(ref object, object, object)</see> that is an atomic operation that compares the value of the first parameter
            with the third,
            and if equal, replaces the first parameter's value with the second .
            The first parameter's original value is returned.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareExchangeObject.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeObject`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeObject`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-object@-system-object-system-object)">
            Interlocked.CompareExchange(ref object, object, object)</see> that is an atomic operation that compares the value of the first parameter
            to the value of the const type argument <typeparamref name="K"/>.
            If equal, the first parameter's value is replaced with the value of the second as an atomic operation.
            The original value is returned.
            </summary>
            <typeparam name="K">
            The const type argument containing the value to compare with the third parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeObject`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeK_Object`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeK_Object`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-object@-system-object-system-object)">
            Interlocked.CompareExchange(ref object, object, object)</see> that is an atomic operation that compares the value of the first parameter
            with the second.
            If equal, the first parameter's value is replaced with the value of the const type argument <typeparamref name="K"/>.
            The original value is returned.
            </summary>
            <typeparam name="K">
            The const type argument containing the value to set as the third parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareExchangeK_Object`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeK_Object`2">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeK_Object`2"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(system-object@-system-object-system-object)">
            Interlocked.CompareExchange(ref object, object, object)</see> that is an atomic operation that compares the value of the first parameter
            to the value of the const type argument <typeparamref name="KCompare"/>.
            If equal, the first parameter's value is replaced with the value of the const type argument <typeparamref name="KExchange"/>.
            The original value is returned.
            </summary>
            <typeparam name="KCompare">
            The const type argument containing the value to compare with the third parameter.
            </typeparam>
            <typeparam name="KExchange">
            The const type argument containing the value to exchange with the first parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeK_Object`2.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeT`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeT`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(-0@-0-0)">
            Interlocked.CompareExchange(ref T, T, T)</see> that is an atomic operation that compares the value of the first parameter
            with the third,
            and if equal, replaces the first parameter's value with the second .
            The first parameter's original value is returned.
            </summary>
            <typeparam name="T">
            The type of the value to be compared and exchanged.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareExchangeT`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeT`2">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeT`2"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(-0@-0-0)">
            Interlocked.CompareExchange(ref T, T, T)</see> that is an atomic operation that compares the value of the first parameter
            to the value of the const type argument <typeparamref name="K"/>.
            If equal, the first parameter's value is replaced with the value of the second as an atomic operation.
            The original value is returned.
            </summary>
            <typeparam name="T">
            The type of the value to be compared and exchanged.
            </typeparam>
            <typeparam name="K">
            The const type argument containing the value to compare with the third parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeT`2.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeK_T`2">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareExchangeK_T`2"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(-0@-0-0)">
            Interlocked.CompareExchange(ref T, T, T)</see> that is an atomic operation that compares the value of the first parameter
            with the second.
            If equal, the first parameter's value is replaced with the value of the const type argument <typeparamref name="K"/>.
            The original value is returned.
            </summary>
            <typeparam name="T">
            The type of the value to be compared and exchanged.
            </typeparam>
            <typeparam name="K">
            The const type argument containing the value to set as the third parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareExchangeK_T`2.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeK_T`3">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeK_T`3"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.compareexchange#system-threading-interlocked-compareexchange(-0@-0-0)">
            Interlocked.CompareExchange(ref T, T, T)</see> that is an atomic operation that compares the value of the first parameter
            to the value of the const type argument <typeparamref name="KCompare"/>.
            If equal, the first parameter's value is replaced with the value of the const type argument <typeparamref name="KExchange"/>.
            The original value is returned.
            </summary>
            <typeparam name="T">
            The type of the value to be compared and exchanged.
            </typeparam>
            <typeparam name="KCompare">
            The const type argument containing the value to compare with the third parameter.
            </typeparam>
            <typeparam name="KExchange">
            The const type argument containing the value to exchange with the first parameter.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.CompareK_ExchangeK_T`3.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.DecrementInt32">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.DecrementInt32"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.increment#system-threading-interlocked-increment(system-int32@)">
            Interlocked.Decrement(ref int)</see> which decrements the value of the first parameter as an atomic operation.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.DecrementInt32.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.DecrementUInt32">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.DecrementUInt32"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.increment#system-threading-interlocked-increment(system-uint32@)">
            Interlocked.Decrement(ref uint)</see> which decrements the value of the first parameter as an atomic operation.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.DecrementUInt32.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.DecrementInt64">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.DecrementInt64"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.increment#system-threading-interlocked-increment(system-int64@)">
            Interlocked.Decrement(ref long)</see> which decrements the value of the first parameter as an atomic operation.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.DecrementInt64.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.DecrementUInt64">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.DecrementUInt64"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.increment#system-threading-interlocked-increment(system-uint64@)">
            Interlocked.Decrement(ref ulong)</see> which decrements the value of the first parameter as an atomic operation.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.DecrementUInt64.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange#system-threading-interlocked-exchange(system-int32@-system-int32)">
            Interlocked.Exchange(ref int, int)</see> which sets the value of the first parameter to the
            value of the second and returns the original value as an atomic operation.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32`1"/>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange">
            System.Threading.Interlocked.Exchange</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`2"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange#system-threading-interlocked-exchange(system-int32@-system-int32)">
            Interlocked.Exchange(ref int, int)</see> which sets the value of the first parameter to the
            the value of the const type argument <typeparamref name="K"/> and
            returns the original value as an atomic operation.
            </summary>
            <typeparam name="K">
            The const type argument containing the new value.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32"/>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange">
            System.Threading.Interlocked.Exchange</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`2"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange#system-threading-interlocked-exchange(system-uint32@-system-uint32)">
            Interlocked.Exchange(ref uint, uint)</see> which sets the value of the first parameter to the
            value of the second and returns the original value as an atomic operation.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32`1"/>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange#system-threading-interlocked-exchange(system-uint32@)">
            System.Threading.Interlocked.Exchange</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`2"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange#system-threading-interlocked-exchange(system-int32@-system-int32)">
            Interlocked.Exchange(ref int, int)</see> which sets the value of the first parameter to the
            the value of the const type argument <typeparamref name="K"/> and
            returns the original value as an atomic operation.
            </summary>
            <typeparam name="K">
            The const type argument containing the new value.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32"/>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange">
            System.Threading.Interlocked.Exchange</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`2"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange#system-threading-interlocked-exchange(system-int64@-system-uint64)">
            Interlocked.Exchange(ref long, long)</see> which sets the value of the first parameter to the
            value of the second and returns the original value as an atomic operation.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64`1"/>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange">
            System.Threading.Interlocked.Exchange</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`2"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange#system-threading-interlocked-exchange(system-int64@-system-uint64)">
            Interlocked.Exchange(ref long, long)</see> which sets the value of the first parameter to the
            the value of the const type argument <typeparamref name="K"/> and
            returns the original value as an atomic operation.
            </summary>
            <typeparam name="K">
            The const type argument containing the new value.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64"/>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange">
            System.Threading.Interlocked.Exchange</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`2"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange#system-threading-interlocked-exchange(system-uint64@-system-uint64)">
            Interlocked.Exchange(ref ulong, ulong)</see> which sets the value of the first parameter to the
            value of the second and returns the original value as an atomic operation.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64`1"/>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange#system-threading-interlocked-exchange">
            System.Threading.Interlocked.Exchange</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`2"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange#system-threading-interlocked-exchange(system-int64@-system-uint64)">
            Interlocked.Exchange(ref long, long)</see> which sets the value of the first parameter to the
            the value of the const type argument <typeparamref name="K"/> and
            returns the original value as an atomic operation.
            </summary>
            <typeparam name="K">
            The const type argument containing the new value.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64"/>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange">
            System.Threading.Interlocked.Exchange</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`2"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange#system-threading-interlocked-exchange(system-single@-system-single)">
            Interlocked.Exchange(ref float, float)</see> which sets the value of the first parameter to the
            value of the second and returns the original value as an atomic operation.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle`1"/>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange">
            System.Threading.Interlocked.Exchange</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`2"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange#system-threading-interlocked-exchange(system-single@-system-single)">
            Interlocked.Exchange(ref float, float)</see> which sets the value of the first parameter to the
            the value of the const type argument <typeparamref name="K"/> and
            returns the original value as an atomic operation.
            </summary>
            <typeparam name="K">
            The const type argument containing the new value.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle"/>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange">
            System.Threading.Interlocked.Exchange</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`2"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange#system-threading-interlocked-exchange(system-double@-system-double)">
            Interlocked.Exchange(ref double, double)</see> which sets the value of the first parameter to the
            value of the second and returns the original value as an atomic operation.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble`1"/>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange">
            System.Threading.Interlocked.Exchange</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`2"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange#system-threading-interlocked-exchange(system-double@-system-double)">
            Interlocked.Exchange(ref double, double)</see> which sets the value of the first parameter to the
            the value of the const type argument <typeparamref name="K"/> and
            returns the original value as an atomic operation.
            </summary>
            <typeparam name="K">
            The const type argument containing the new value.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble"/>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange">
            System.Threading.Interlocked.Exchange</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`2"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange#system-threading-interlocked-exchange(system-intptr@-system-intptr)">
            Interlocked.Exchange(ref nint, nint)</see> which sets the value of the first parameter to the
            value of the second and returns the original value as an atomic operation.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr"/>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange">
            System.Threading.Interlocked.Exchange</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`2"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange#system-threading-interlocked-exchange(system-intptr@-system-intptr)">
            Interlocked.Exchange(ref nint, nint)</see> which sets the value of the first parameter to the
            the value of the const type argument <typeparamref name="K"/> and
            returns the original value as an atomic operation.
            </summary>
            <typeparam name="K">
            The const type argument containing the new value.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr"/>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange">
            System.Threading.Interlocked.Exchange</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`2"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange#system-threading-interlocked-exchange(system-uintptr@-system-uintptr)">
            Interlocked.Exchange(ref nuint, nuint)</see> which sets the value of the first parameter to the
            value of the second and returns the original value as an atomic operation.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr`1"/>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange#system-threading-interlocked-exchange">
            System.Threading.Interlocked.Exchange</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`2"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see cref="T:ConstTypeArgs.Delegates.Funcs.RefFunction`2"/> which sets the value of the first parameter to the
            the value of the const type argument <typeparamref name="K"/> and
            returns the original value as an atomic operation.
            </summary>
            <typeparam name="K">
            The const type argument containing the new value.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr"/>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange">
            System.Threading.Interlocked.Exchange</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`2"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange#system-threading-interlocked-exchange(system-object@-system-object)">
            Interlocked.Exchange(ref object, object)</see> which sets the value of the first parameter to the
            value of the second and returns the original value as an atomic operation.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.ExchangeObject.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject`1"/>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange">
            System.Threading.Interlocked.Exchange</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`2"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange#system-threading-interlocked-exchange(system-object@-system-object)">
            Interlocked.Exchange(ref object, object)</see> which sets the value of the first parameter to the
            the value of the const type argument <typeparamref name="K"/> and
            returns the original value as an atomic operation.
            </summary>
            <typeparam name="K">
            The const type argument containing the new value.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.ExchangeObject`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject"/>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange">
            System.Threading.Interlocked.Exchange</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`2"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange#system-threading-interlocked-exchange(-0@-0)">
            Interlocked.Exchange(ref T, T)</see> which sets the value of the first parameter to the
            value of the second and returns the original value as an atomic operation.
            </summary>
            <typeparam name="T">
            The type of the value to be exchanged.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.ExchangeT`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`2"/>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange">
            System.Threading.Interlocked.Exchange</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject`1"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`2">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange#system-threading-interlocked-exchange(-0@-0)">
            Interlocked.Exchange(ref T, T)</see> which sets the value of the first parameter to the
            the value of the const type argument <typeparamref name="K"/> and
            returns the original value as an atomic operation.
            </summary>
            <typeparam name="T">
            The type of the value to be exchanged.
            </typeparam>
            <typeparam name="K">
            The const type argument containing the new value.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.ExchangeT`2.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeT`1"/>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.exchange">
            System.Threading.Interlocked.Exchange</seealso>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt32`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUInt64`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeSingle`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeDouble`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeUIntPtr`1"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject"/>
            <seealso cref="T:ConstTypeArgs.Delegates.Interlocked.ExchangeObject`1"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.IncrementInt32">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.IncrementInt32"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.increment#system-threading-interlocked-increment(system-int32@)">
            Interlocked.Increment(ref int)</see> which increments the value of the first parameter as an atomic operation.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.IncrementInt32.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.IncrementUInt32">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.IncrementUInt32"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.increment#system-threading-interlocked-increment(system-uint32@)">
            Interlocked.Increment(ref uint)</see> which increments the value of the first parameter as an atomic operation.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.IncrementUInt32.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.IncrementInt64">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.IncrementInt64"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.increment#system-threading-interlocked-increment(system-int64@)">
            Interlocked.Increment(ref long)</see> which increments the value of the first parameter as an atomic operation.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.IncrementInt64.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.IncrementUInt64">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.IncrementUInt64"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.increment#system-threading-interlocked-increment(system-uint64@)">
            Interlocked.Increment(ref ulong)</see> which increments the value of the first parameter as an atomic operation.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.IncrementUInt64.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.OrInt32">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.OrInt32"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.or#system-threading-interlocked-or(system-int32@-system-int32)">
            Interlocked.Or(ref int, int)</see> which is an atomic operation that performs a bitwise OR operation on the value of the first parameter
            with the second and returns the original value.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.OrInt32.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.OrInt32`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.OrInt32`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.or#system-threading-interlocked-or(system-int32@-system-int32)">
            Interlocked.Or(ref int, int)</see> which is an atomic operation that performs a bitwise OR operation on the value of the first parameter
            with the value of the const type argument <typeparamref name="K"/> and
            returns the original value.
            </summary>
            <typeparam name="K">
            The const type argument containing the second value for the OR operation.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.OrInt32`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.OrUInt32">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.OrUInt32"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.or#system-threading-interlocked-or(system-uint32@-system-uint32)">
            Interlocked.Or(ref uint, uint)</see> which is an atomic operation that performs a bitwise OR operation on the value of the first parameter
            with the second and returns the original value.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.OrUInt32.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.OrUInt32`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.OrUInt32`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.or#system-threading-interlocked-or(system-uint32@-system-uint32)">
            Interlocked.Or(ref uint, uint)</see> which is an atomic operation that performs a bitwise OR operation on the value of the first parameter
            with the value of the const type argument <typeparamref name="K"/> and
            returns the original value.
            </summary>
            <typeparam name="K">
            The const type argument containing the second value for the OR operation.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.OrUInt32`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.OrInt64">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.OrInt64"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.and#system-threading-interlocked-or(system-int64@-system-int64)">
            Interlocked.Or(ref long, long)</see> which is an atomic operation that performs a bitwise OR operation on the value of the first parameter
            with the second and returns the original value.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.OrInt64.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.OrInt64`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.OrInt64`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.and#system-threading-interlocked-or(system-int64@-system-int64)">
            Interlocked.Or(ref long, long)</see> which is an atomic operation that performs a bitwise OR operation on the value of the first parameter
            with the value of the const type argument <typeparamref name="K"/> and
            returns the original value.
            </summary>
            <typeparam name="K">
            The const type argument containing the second value for the OR operation.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.OrInt64`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.OrUInt64">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.OrUInt64"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.and#system-threading-interlocked-or(system-uint64@-system-uint64)">
            Interlocked.And(ref ulong, ulong)</see> which is an atomic operation that performs a bitwise OR operation on the value of the first parameter
            with the second and returns the original value.
            </summary>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.OrUInt64.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="T:ConstTypeArgs.Delegates.Interlocked.OrUInt64`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Delegates.Interlocked.OrUInt64`1"/> readonly struct provides a const type argument equal to
            a thread-safe <see href="https://learn.microsoft.com/dotnet/api/system.threading.interlocked.and#system-threading-interlocked-or(system-uint64@-system-uint64)">
            Interlocked.And(ref ulong, ulong)</see> which is an atomic operation that performs a bitwise OR operation on the value of the first parameter
            with the value of the const type argument <typeparamref name="K"/> and
            returns the original value.
            </summary>
            <typeparam name="K">
            The const type argument containing the second value for the OR operation.
            </typeparam>
            <exception cref="T:System.NullReferenceException">
            Thrown when calling the method <see cref="P:ConstTypeArgs.Delegates.Interlocked.OrUInt64`1.Value"/> provides and the address of the first argument
            is equal to a <see langword="null"/> pointer.
            </exception>
            <threadsafety static="true" instance="true"/>
        </member>
    </members>
</doc>

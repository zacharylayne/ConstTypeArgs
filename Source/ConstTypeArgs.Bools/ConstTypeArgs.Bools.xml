<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ConstTypeArgs.Bools</name>
    </assembly>
    <members>
        <member name="T:ConstTypeArgs.Bools.K_Bool">
            <summary>
            The <see cref="T:ConstTypeArgs.Bools.K_Bool"/> interface provides a more explicit
            <c>IConstTypeArg&lt;bool&gt;</c> derived type.
            </summary>
            <remarks>
            Implement this interface when defining <see langword="bool"/> const type arguments
            rather than <see cref="T:ConstTypeArgs.Core.K_Unmanaged`1">K_Unmanaged&lt;bool&gt;</see>
            or <see cref="T:ConstTypeArgs.IConstTypeArg`1">IConstType&lt;bool&gt;</see>.
            In uncommon scenarios where they need to be instantiated,
            use <see cref="T:ConstTypeArgs.Bools.K_Bool`1"/> instead.
            </remarks>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.boolean">
            System.Boolean</seealso>
            <seealso cref="T:ConstTypeArgs.Bools.Bool`1"/>
            <seealso cref="T:ConstTypeArgs.Bools.K_BoolArray"/>
            <seealso cref="T:ConstTypeArgs.Bools.K_Bool.__"/>
        </member>
        <member name="T:ConstTypeArgs.Bools.K_Bool.__">
            <summary>
            The <see cref="T:ConstTypeArgs.Bools.K_Bool.__"/> interface is a <em>discard argument</em> meant to signify
            a lack of value and is used as a placeholder in type parameter lists.
            When combined with other discard arguments of other types, it can be used to create
            union-like behavior.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Bools.K_Bool`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Bools.K_Bool`1"/> interface provides a more explicit
            <c>IConstTypeArg&lt;bool, K_Bool&lt;TSelf&gt;&gt;</c> derived type.
            </summary>
            <typeparam name="TSelf">
            The implementing type.
            </typeparam>
            <remarks>
            Implement this interface for <see langword="bool"/> const type arguments in uncommon
            scenarios where they need to be instantiated. Otherwise, use <see cref="T:ConstTypeArgs.Bools.K_Bool"/> instead.
            </remarks>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.boolean">
            System.Boolean</seealso>
            <seealso cref="T:ConstTypeArgs.Bools.Bool`1"/>
            <seealso cref="T:ConstTypeArgs.Bools.K_BoolArray`1"/>
        </member>
        <member name="T:ConstTypeArgs.Bools.K_BoolArray">
            <summary>
            The <see cref="T:ConstTypeArgs.Bools.K_BoolArray"/> interface provides a more explicit
            <c>IConstTypeArg&lt;bool[]&gt;</c> type.
            </summary>
            <remarks>
            Implement this interface when defining <see langword="bool[]"/> const type arguments
            rather than <see cref="T:ConstTypeArgs.Core.K_Array`1">K_Array&lt;bool&gt;</see>
            or <see cref="T:ConstTypeArgs.IConstTypeArg`1">IConstTypeArg&lt;bool[]&gt;</see>.
            In uncommon scenarios where they need to be instantiated,
            use <see cref="T:ConstTypeArgs.Bools.K_BoolArray`1"/> instead.
            </remarks>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.boolean">
            System.Boolean</seealso>
            <seealso cref="T:ConstTypeArgs.Bools.BoolArray`1"/>
            <seealso cref="T:ConstTypeArgs.Bools.K_Bool"/>
            <seealso cref="T:ConstTypeArgs.Bools.K_BoolArray.__"/>
        </member>
        <member name="T:ConstTypeArgs.Bools.K_BoolArray.__">
            <summary>
            The <see cref="T:ConstTypeArgs.Bools.K_BoolArray.__"/> interface is a <em>discard argument</em> meant to signify
            a lack of value and is used as a placeholder in type parameter lists.
            When combined with other discard arguments of other types, it can be used to create
            union-like behavior.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Bools.K_BoolArray`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Bools.K_BoolArray`1"/> interface provides a more explicit
            <c>IConstTypeArg&lt;bool[], K_BoolArray&lt;TSelf&gt;&gt;</c> derived type.
            </summary>
            <typeparam name="TSelf">
            The implementing type.
            </typeparam>
            <remarks>
            Implement this interface for <see langword="bool[]"/> const type arguments in uncommon
            scenarios where they need to be instantiated.
            Otherwise, use <see cref="T:ConstTypeArgs.Bools.K_BoolArray"/> instead.
            </remarks>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.boolean">
            System.Boolean</seealso>
            <seealso cref="T:ConstTypeArgs.Bools.BoolArray`1"/>
            <seealso cref="T:ConstTypeArgs.Bools.K_Bool`1"/>
        </member>
        <member name="T:ConstTypeArgs.Bools.Bool`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Bools.Bool`1"/> class provides a const argument provider that
            wraps the <see langword="bool"/> value from another const argument provider.
            </summary>
            <typeparam name="K">
            The const argument provider type containing the value to wrap.
            </typeparam>
            <remarks>
            This class can be used to create domain-specific const type arguments or
            to wrap const type arguments for reuse in other contexts.
            </remarks>
            <seealso cref="T:ConstTypeArgs.Bools.K_Bool"/>
            <seealso cref="T:ConstTypeArgs.Bools.BoolArray`1"/>
        </member>
        <member name="T:ConstTypeArgs.Bools.BoolArray`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Bools.BoolArray`1"/> class provides a const argument provider that
            wraps the <see langword="bool"/> array from another const argument provider.
            </summary>
            <typeparam name="K">
            The const argument provider type containing the array to wrap.
            </typeparam>
            <remarks>
            This class can be used to create domain-specific const type arguments or
            to wrap const type arguments for reuse in other contexts.
            </remarks>
            <seealso cref="T:ConstTypeArgs.Bools.K_BoolArray"/>
            <seealso cref="T:ConstTypeArgs.Bools.Bool`1"/>
        </member>
        <member name="T:ConstTypeArgs.Bools.Default">
            <summary>
            The <see cref="T:ConstTypeArgs.Bools.Default"/> readonly struct provides a const type argument equal to the
            <see langword="default"/> of <see langword="bool"/> (<c>false</c>).
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Bools.True">
            <summary>
            The <see cref="T:ConstTypeArgs.Bools.True"/> readonly struct provides a const type argument equal to
            <see langword="true"/>.
            </summary>
            <seealso cref="T:ConstTypeArgs.Bools.False"/>
        </member>
        <member name="T:ConstTypeArgs.Bools.False">
            <summary>
            The <see cref="T:ConstTypeArgs.Bools.False"/> readonly struct provides a const type argument equal to
            <see langword="false"/>.
            </summary>
            <seealso cref="T:ConstTypeArgs.Bools.True"/>
        </member>
    </members>
</doc>

<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ConstTypeArgs.Shorts</name>
    </assembly>
    <members>
        <member name="T:ConstTypeArgs.Shorts.K_Short">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts.K_Short"/> interface provides a more explicit
            <c>IConstTypeArg&lt;short&gt;</c> derived type.
            </summary>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.int16">
            System.Int16</seealso>
            <seealso cref="T:ConstTypeArgs.Shorts.Short`1"/>
            <seealso cref="T:ConstTypeArgs.Shorts.K_ShortArray"/>
            <seealso cref="T:ConstTypeArgs.Shorts.K_Short.__"/>
        </member>
        <member name="T:ConstTypeArgs.Shorts.K_Short.__">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts.K_Short.__"/> interface is a <em>discard argument</em> meant to signify
            a lack of value and is used as a placeholder in type parameter lists.
            When combined with other discard arguments of other types, it can be used to create
            union-like behavior.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Shorts.K_Short`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts.K_Short`1"/> interface provides a more explicit
            <c>IConstTypeArg&lt;short, K_Short&lt;TSelf&gt;&gt;</c> derived type.
            </summary>
            <typeparam name="TSelf">
            The implementing type.
            </typeparam>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.int16">
            System.Int16</seealso>
            <seealso cref="T:ConstTypeArgs.Shorts.Short`1"/>
            <seealso cref="T:ConstTypeArgs.Shorts.K_ShortArray`1"/>
        </member>
        <member name="T:ConstTypeArgs.Shorts.K_ShortArray">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts.K_ShortArray"/> interface provides a more explicit
            <c>IConstTypeArg&lt;short[]&gt;</c> type.
            </summary>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.int16">
            System.Int16</seealso>
            <seealso cref="T:ConstTypeArgs.Shorts.ShortArray`1"/>
            <seealso cref="T:ConstTypeArgs.Shorts.K_Short"/>
            <seealso cref="T:ConstTypeArgs.Shorts.K_ShortArray.__"/>
        </member>
        <member name="T:ConstTypeArgs.Shorts.K_ShortArray.__">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts.K_ShortArray.__"/> interface is a <em>discard argument</em> meant to signify
            a lack of value and is used as a placeholder in type parameter lists.
            When combined with other discard arguments of other types, it can be used to create
            union-like behavior.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Shorts.K_ShortArray`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts.K_ShortArray`1"/> interface provides a more explicit
            <c>IConstTypeArg&lt;short[], K_ShortArray&lt;TSelf&gt;&gt;</c> derived type.
            </summary>
            <typeparam name="TSelf">
            The implementing type.
            </typeparam>
            <seealso href="https://learn.microsoft.com/dotnet/api/system.int16">
            System.Int16</seealso>
            <seealso cref="T:ConstTypeArgs.Shorts.ShortArray`1"/>
            <seealso cref="T:ConstTypeArgs.Shorts.K_Short`1"/>
        </member>
        <member name="T:ConstTypeArgs.Shorts.Short`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts.Short`1"/> class provides a const argument provider that
            wraps the <see langword="short"/> value from another const argument provider.
            </summary>
            <typeparam name="K">
            The const argument provider type containing the value to wrap.
            </typeparam>
            <remarks>
            This class can be useful when creating domain-specific const argument providers,
            such as default values, when a const argument provider's value needs to be
            wrapped for use in a different context.
            </remarks>
            <seealso cref="T:ConstTypeArgs.Shorts.ShortArray`1"/>
            <seealso cref="T:ConstTypeArgs.Shorts.K_Short"/>
            <seealso cref="T:ConstTypeArgs.Shorts.K_Short`1"/>
        </member>
        <member name="T:ConstTypeArgs.Shorts.ShortArray`1">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts.ShortArray`1"/> class provides a const argument provider that
            wraps the <see langword="short"/> array from another const argument provider.
            </summary>
            <typeparam name="K">
            The const argument provider type containing the array to wrap.
            </typeparam>
            <remarks>
            This class can be useful when creating domain-specific const argument providers,
            such as default values, when a const argument provider's value needs to be
            wrapped for use in a different context.
            </remarks>
            <seealso cref="T:ConstTypeArgs.Shorts.Short`1"/>
            <seealso cref="T:ConstTypeArgs.Shorts.K_Short"/>
        </member>
        <member name="T:ConstTypeArgs.Shorts.Default">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts.Default"/> readonly struct provides a const type argument
            equal to <see langword="default"/> of <see langword="short"/> (<c>0</c>).
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Shorts.MinValue">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts.MinValue"/> readonly struct provides a const type argument
            equal to
            <see href="https://docs.microsoft.com/dotnet/api/system.int16.minvalue">
            Int16.MinValue</see> (<c>-32768</c>).
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Shorts.MaxValue">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts.MaxValue"/> readonly struct provides a const type argument
            equal to
            <see href="https://docs.microsoft.com/dotnet/api/system.int16.maxvalue">
            Int16.MaxValue</see> (<c>32767</c>).
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Shorts.MaxDigits">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts.MaxDigits"/> readonly struct provides a const type argument equal to
            the maximum number of digits in a <see langword="short"/> (<c>5</c>).
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Shorts.MaxHexDigits">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts.MaxHexDigits"/> readonly struct provides a const type argument equal to
            the maximum number of hex digits in a <see langword="short"/> (<c>4</c>).
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Shorts._0">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts._0"/> readonly struct provides a const type argument equal to
            <c>0</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Shorts.Neg_1">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts.Neg_1"/> readonly struct provides a const type argument equal to
            <c>-1</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Shorts.Neg_2">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts.Neg_2"/> readonly struct provides a const type argument equal to
            <c>-2</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Shorts.Neg_3">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts.Neg_3"/> readonly struct provides a const type argument equal to
            <c>-3</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Shorts.Neg_4">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts.Neg_4"/> readonly struct provides a const type argument equal to
            <c>-4</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Shorts.Neg_5">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts.Neg_5"/> readonly struct provides a const type argument equal to
            <c>-5</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Shorts.Neg_6">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts.Neg_6"/> readonly struct provides a const type argument equal to
            <c>-6</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Shorts.Neg_7">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts.Neg_7"/> readonly struct provides a const type argument equal to
            <c>-7</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Shorts.Neg_8">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts.Neg_8"/> readonly struct provides a const type argument equal to
            <c>-8</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Shorts.Neg_9">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts.Neg_9"/> readonly struct provides a const type argument equal to
            <c>-9</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Shorts.Neg_10">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts.Neg_10"/> readonly struct provides a const type argument equal to
            <c>-10</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Shorts.Neg_11">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts.Neg_11"/> readonly struct provides a const type argument equal to
            <c>-11</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Shorts.Neg_12">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts.Neg_12"/> readonly struct provides a const type argument equal to
            <c>-12</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Shorts.Neg_13">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts.Neg_13"/> readonly struct provides a const type argument equal to
            <c>-13</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Shorts.Neg_14">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts.Neg_14"/> readonly struct provides a const type argument equal to
            <c>-14</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Shorts.Neg_15">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts.Neg_15"/> readonly struct provides a const type argument equal to
            <c>-15</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Shorts._1">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts._1"/> readonly struct provides a const type argument equal to
            <c>1</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Shorts._2">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts._2"/> readonly struct provides a const type argument equal to
            <c>2</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Shorts._3">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts._3"/> readonly struct provides a const type argument equal to
            <c>3</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Shorts._4">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts._4"/> readonly struct provides a const type argument equal to
            <c>4</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Shorts._5">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts._5"/> readonly struct provides a const type argument equal to
            <c>5</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Shorts._6">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts._6"/> readonly struct provides a const type argument equal to
            <c>6</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Shorts._7">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts._7"/> readonly struct provides a const type argument equal to
            <c>7</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Shorts._8">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts._8"/> readonly struct provides a const type argument equal to
            <c>8</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Shorts._9">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts._9"/> readonly struct provides a const type argument equal to
            <c>9</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Shorts._10">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts._10"/> readonly struct provides a const type argument equal to
            <c>10</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Shorts._11">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts._11"/> readonly struct provides a const type argument equal to
            <c>11</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Shorts._12">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts._12"/> readonly struct provides a const type argument equal to
            <c>12</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Shorts._13">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts._13"/> readonly struct provides a const type argument equal to
            <c>13</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Shorts._14">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts._14"/> readonly struct provides a const type argument equal to
            <c>14</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Shorts._15">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts._15"/> readonly struct provides a const type argument equal to
            <c>15</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Shorts._16">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts._16"/> readonly struct provides a const type argument equal to
            <c>16</c> (<c>2^4</c>).
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Shorts._25">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts._25"/> readonly struct provides a const type argument equal to
            <c>25</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Shorts._31">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts._31"/> readonly struct provides a const type argument equal to
            <c>31</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Shorts._32">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts._32"/> readonly struct provides a const type argument equal to
            <c>32</c> (<c>2^5</c>).
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Shorts._50">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts._50"/> readonly struct provides a const type argument equal to
            <c>50</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Shorts._63">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts._63"/> readonly struct provides a const type argument equal to
            <c>63</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Shorts._64">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts._64"/> readonly struct provides a const type argument equal to
            <c>64</c> (<c>2^6</c>).
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Shorts._100">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts._100"/> readonly struct provides a const type argument equal to
            <c>100</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Shorts._127">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts._127"/> readonly struct provides a const type argument equal to
            <c>127</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Shorts._128">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts._128"/> readonly struct provides a const type argument equal to
            <c>128</c> (<c>2^7</c>).
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Shorts._200">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts._200"/> readonly struct provides a const type argument equal to
            <c>200</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Shorts._255">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts._255"/> readonly struct provides a const type argument equal to
            <c>255</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Shorts._256">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts._256"/> readonly struct provides a const type argument equal to
            <c>256</c> (<c>2^8</c>).
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Shorts._511">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts._511"/> readonly struct provides a const type argument equal to
            <c>_511</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Shorts._512">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts._512"/> readonly struct provides a const type argument equal to
            <c>512</c> (<c>2^9</c>).
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Shorts._1023">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts._1023"/> readonly struct provides a const type argument equal to
            <c>1023</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Shorts._1024">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts._1024"/> readonly struct provides a const type argument equal to
            <c>1024</c> (<c>2^10</c>).
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Shorts._2047">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts._2047"/> readonly struct provides a const type argument equal to
            <c>2047</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Shorts._2048">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts._2048"/> readonly struct provides a const type argument equal to
            <c>2048</c> (<c>2^11</c>).
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Shorts._4095">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts._4095"/> readonly struct provides a const type argument equal to
            <c>4095</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Shorts._4096">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts._4096"/> readonly struct provides a const type argument equal to
            <c>4096</c> (<c>2^12</c>).
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Shorts._8191">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts._8191"/> readonly struct provides a const type argument equal to
            <c>8191</c>.
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Shorts._8192">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts._8192"/> readonly struct provides a const type argument equal to
            <c>8192</c> (<c>2^13</c>).
            </summary>
        </member>
        <member name="T:ConstTypeArgs.Shorts._16384">
            <summary>
            The <see cref="T:ConstTypeArgs.Shorts._16384"/> readonly struct provides a const type argument equal to
            <c>16384</c> (<c>2^14</c>).
            </summary>
        </member>
    </members>
</doc>
